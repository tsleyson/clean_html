(({:type :comment, :data "?xml version=\"1.0\" encoding=\"ISO-8859-1\"?"} {:type :dtd, :data ["html" "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"]} {:tag :html, :attrs nil, :content ({:tag :head, :attrs nil, :content ("\n\t" {:tag :title, :attrs nil, :content ("ClojureDocs - clojure.core/atom")} "\n\t" {:tag :meta, :attrs {:content "Documentation and examples for Clojure.", :name "description"}, :content nil} "\n\t" {:tag :meta, :attrs {:content "XjzqkjEPtcgtLjhnqAvtnVSeveEccs-O_unFGGlbk4g", :name "google-site-verification"}, :content nil} "\n\t" {:tag :meta, :attrs {:charset "utf-8", :content "text/html; charset=UTF-8", :http-equiv "Content-Type"}, :content nil} "\n\t" {:tag :link, :attrs {:href "http://clojuredocs.org/opensearch.xml", :title "ClojureDocs", :type "application/opensearchdescription+xml", :rel "search"}, :content nil} "\n\t" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_atom_files/reset.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_atom_files/text.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_atom_files/grid.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_atom_files/common.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_atom_files/main.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_atom_files/shCore.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_atom_files/shThemeDefault.css"}, :content nil} "\n\t" {:tag :script, :attrs {:type "text/javascript", :async "", :src "ClojureDocs%20-%20clojure.core_atom_files/ga.js"}, :content nil} {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_atom_files/shCore.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_atom_files/shBrushClojure.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_atom_files/jquery-1.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_atom_files/jquery-ui-1.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_atom_files/jquery_003.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_atom_files/jquery_002.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_atom_files/jquery.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_atom_files/showdown.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_atom_files/cd.js"}, :content nil} "\n\n\t" {:tag :script, :attrs {:charset "utf-8", :type "text/javascript"}, :content ("\n\t// <![CDATA[\n\t\n\tCD.ROOT_URL = \"\"\n\t\n\tfunction setUpInternalNav() {\n\t\t$(\".scroll\").click(function(event){\n\t\t\t//prevent the default action for the click event\n\t\t\tevent.preventDefault();\n\n\t\t\t//get the full url - like mysitecom/index.htm#home\n\t\t\tvar full_url = this.href;\n\n\t\t\t//split the url by # and get the anchor target name - home in mysitecom/index.htm#home\n\t\t\tvar parts = full_url.split(\"#\");\n\t\t\tvar trgt = parts[1];\n\t\t\t\n\t\t\t//get the top offset of the target anchor\n\t\t\tvar target_offset = $(\"a[name=\"+trgt+\"]\").offset();\n\t\t\tvar target_top = target_offset.top - 10;\n\n\t\t\t//goto that anchor by setting the body scroll top to anchor top\n\t\t\t$('html, body').animate({scrollTop:target_top}, 500);\n\t\t});\n\t}\n\t\n\t$(document).ready(function() {\n\t\tsetUpInternalNav()\n\t\tvar mainText = \"Search\";\n\t\t$(\"#main_search\").makeFocusBlur(mainText, {setColorOnInit: true})\n\n\t\tvar acUrl = \"/ac_search\";\n\t\t\n\t\t//acUrl = \"/ac_search/clojure_core\";\n\t\t\n\t\t\n\t\t$('#main_search').keydown(function(e) {\n\t\t\tif(e.ctrlKey && e.which == 13) {\n\t\t\t\t$(\".search form\").append(\"<input type='hidden' name='feeling_lucky' value='true' />\")\n\t\t\t}\n\t\t})\n\t\t\t\n\t\t$(document).keydown(function(e) {\n\t\t\tif(e.ctrlKey && (e.which == 83)) {\n\t\t\t\t$('#main_search').focus()\n\t\t\t}\n\t\t\t\n\t\t\te.stopPropagation();\n\t\t})\n\t})\n\t// ]]>\t\n\t")} "\n\n\t" {:tag :script, :attrs {:type "text/javascript"}, :content ("\n\t/*** UserVoice ***/\n\tvar uservoiceOptions = {\n\t\t/* required */\n\t\tkey: 'clojuredocs',\n\t\thost: 'clojuredocs.uservoice.com', \n\t\tforum: '64757',\n\t\tshowTab: true,  \n\t\t/* optional */\n\t\talignment: 'right',\n\t\tbackground_color:'#ccc', \n\t\ttext_color: 'white',\n\t\thover_color: '#888',\n\t\tlang: 'en'\n\t};\n\n\tfunction _loadUserVoice() {\n\t\tvar s = document.createElement('script');\n\t\ts.setAttribute('type', 'text/javascript');\n\t\ts.setAttribute('src', (\"https:\" == document.location.protocol ? \"https://\" : \"http://\") + \"cdn.uservoice.com/javascripts/widgets/tab.js\");\n\t\tdocument.getElementsByTagName('head')[0].appendChild(s);\n\t}\n\t_loadSuper = window.onload;\n\twindow.onload = (typeof window.onload != 'function') ? _loadUserVoice : function() { _loadSuper(); _loadUserVoice();};\n\t")} "\n\t\n\t" {:tag :script, :attrs {:type "text/javascript"}, :content ("\n\t  /*** Google Analytics ***/\n\t  var _gaq = _gaq || [];\n\t  _gaq.push(['_setAccount', 'UA-17348828-1']);\n\t  _gaq.push(['_trackPageview']);\n\n\t  (function() {\n\t    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n\t    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n\t    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n\t  })();\n\n\t")} "\n\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_atom_files/tab.js"}, :content nil} {:tag :style, :attrs {:type "text/css", :media "screen"}, :content ("    #uservoice-dialog {      z-index: 100003;      display: block;      text-align: left;      margin: -2em auto 0 auto;      position: fixed;     }        #uservoice-overlay {      position: fixed;      z-index:100002;      width: 100%;      height: 100%;      left: 0;      top: 0;      background-color: #000;      opacity: 0.7;    }        #uservoice-overlay p {      padding: 5px;      color: #ddd;      font: bold 14px arial, sans-serif;      margin: 0;      letter-spacing: -1px;    }        #uservoice-dialog #uservoice-dialog-close {      position: absolute;      height: 48px;      width: 48px;      top: -11px;      right: -12px;      color: #06c;      cursor: pointer;      background-position: 0 0;      background-repeat: no-repeat;      background-color: transparent;    }        html.dialog-open object,    html.dialog-open embed {      visibility: hidden;    }    a#uservoice-dialog-close { background-image: url(http://cdn.uservoice.com/images/icons/close.png); }")} {:tag :style, :attrs {:type "text/css", :media "screen"}, :content ("    body a#uservoice-feedback-tab,    body a#uservoice-feedback-tab:link {      background-position: 2px 50% !important;      position: fixed !important;      top: 45% !important;      display: block !important;      width: 25px !important;      height: 98px !important;      margin: -45px 0 0 0 !important;      padding: 0 !important;      z-index: 100001 !important;      background-position: 2px 50% !important;      background-repeat: no-repeat !important;      text-indent: -9000px;    }        body a#uservoice-feedback-tab:hover {      cursor: pointer;    }        a#uservoice-feedback-tab {       right: 0;       background-repeat: no-repeat;       background-color: #ccc;       background-image: url(http://cdn.uservoice.com/images/widgets/en/feedback_tab_white.png);       border: outset 1px #ccc;       border-right: none;     }        a#uservoice-feedback-tab:hover {       background-color: #888;       border: outset 1px #888;       border-right: none;     }")})} "\n\n" {:tag :body, :attrs nil, :content ({:tag :div, :attrs {:id "uservoice-feedback"}, :content ({:tag :a, :attrs {:href "http://clojuredocs.uservoice.com/forums/64757?lang=en", :onmouseover "UserVoice.Popin.preload();", :onclick "UserVoice.Popin.show(); return false;", :_ "", :id "uservoice-feedback-tab"}, :content ("Open Feedback Dialog")})} "\n\t" {:tag :script, :attrs {:charset "utf-8", :type "text/javascript"}, :content ("\n\t$(document).ready(function() {\n\t\t$(\"#main_search\").autocomplete({\n\t\t\tsource: function(req, add) {\n\t\t\t\t$.getJSON(\"/search_autocomplete\", req, function(data) {\n\t\t\t\t\tvar out = []\n\t\t\t\t\t$.each(data, function(i, v) {\n\t\t\t\t\t\tvar lbl = \"<div class=\\\"ac_search_result\\\">\"\n\t\t\t\t\t\tlbl += \"<span class='name'>\" + v.name + \"</span>\"\n\t\t\t\t\t\tlbl += \"<span class='ns'>\" + v.ns + \"</span>\"\n\t\t\t\t\t\tlbl += \"<br />\"\n\t\t\t\t\t\tlbl += \"<span class='shortdoc'>\" + v.shortdoc + \"</span>\"\n\t\t\t\t\t\tlbl += \"</div>\"\n\t\t\t\t\t\tout.push({label: lbl, value: v.name, href: v.href})\n\t\t\t\t\t})\n\t\t\t\t\t\n\t\t\t\t\tadd(out)\n\t\t\t\t})\n\t\t\t},\n\t\t\tfocus: function(event, ui) {\n\t\t\t\treturn false\n\t\t\t},\n\t\t\tselect: function(event, ui) {\n\t\t\t\twindow.location.href = ui.item.href\n\t\t\t\treturn false\n\t\t\t},\n\t\t\tdataType: \"json\"\n\t\t})\n\t})\n")} "\n\n" {:tag :div, :attrs {:class "header"}, :content ("\n\t" {:tag :div, :attrs {:class "container_16"}, :content ("\n\t" {:tag :div, :attrs {:class "header_content"}, :content ("\n\t\t" {:tag :div, :attrs {:class "user_area"}, :content ("\n\t\t\t\t" {:tag :div, :attrs {:class "grid_16"}, :content ("\n            " {:tag :span, :attrs {:class "main_nav"}, :content ("\n            " {:tag :a, :attrs {:href "http://api.clojuredocs.org/"}, :content ("api")} "\n             \n            " {:tag :a, :attrs {:href "http://clojuredocs.wordpress.com/"}, :content ("blog")} "\n             \n            " {:tag :a, :attrs {:href "http://github.com/zkim/clojuredocs"}, :content ("github")} "\n            ")} "\n             \n             \n\t\t\t\t  " {:tag :span, :attrs {:class "user_area_content"}, :content ("\n\t\t\t\t    \n\t\t\t\t      " {:tag :a, :attrs {:id "login", :href "http://clojuredocs.org/login"}, :content ("login / sign up")} "\n\t\t\t\t      \n\t\t\t\t  ")} "\n\t\t\t\t")} "\n\t\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "grid_1"}, :content ("\n\t\t  " {:tag :img, :attrs {:width "52", :height "33", :src "ClojureDocs%20-%20clojure.core_atom_files/cd_logo.png", :class "cd_logo", :alt "Cd_logo"}, :content nil} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "grid_7"}, :content ("\n\t\t\t" {:tag :h1, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/"}, :content ("ClojureDocs")} {:tag :span, :attrs {:class "version"}, :content ("(beta)")})} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "grid_8"}, :content ("\n\t\t\t" {:tag :div, :attrs {:class "search"}, :content ("\n\t\t\t\t" {:tag :form, :attrs {:method "get", :action "/search"}, :content ("\n\t\t\t\t\t" {:tag :input, :attrs {:width "20px", :type "image", :height "20px", :src "ClojureDocs%20-%20clojure.core_atom_files/magnifying_glass_alt_24x24.png", :class "submit_image"}, :content nil} "\n\t\t\t\t\t" {:tag :input, :attrs {:type "text", :name "q", :class "text_field ui-autocomplete-input", :id "main_search", :style "color: rgb(0, 0, 0);", :autocomplete "off", :role "textbox", :aria-autocomplete "list", :aria-haspopup "true"}, :content nil} "\n\t\t\t\t\t\n\t\t\t\t\t\t" {:tag :input, :attrs {:type "hidden", :value "clojure_core", :name "lib"}, :content nil} "\n\t\t\t\t\t\n\t\t\t\t")} "\n\t\t\t")} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t")} "\n\t")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n" {:tag :div, :attrs {:class "header_filler"}, :content nil} "\n" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\n\t\n\t\n\t\n\n\n" {:tag :script, :attrs {:charset "utf-8", :type "text/javascript"}, :content ("\n\n\n$(document).ready(function() {\n\tCD.VarPage.init({\n\t\tvarId: 5370,\n\t\tlibrary: \"Clojure Core\",\n\t\tversion: \"1.3.0\",\n\t\teditExampleFormHTML: '<div class=\"edit_example\"><form action=\"/clojure_core/clojure.core/atom\" method=\"post\"><div style=\"margin:0;padding:0;display:inline\"><input name=\"authenticity_token\" type=\"hidden\" value=\"W5FCJMHUHoicFfYpCVsE976sifq4dms3UCwEP5L0ziI=\" /></div>Example Content <span class=\"instructions\">(code only, do not wrap in &lt;pre&gt; tags. See <a href=\"/examples_style_guide\">style guide</a> for more information.)</span><div class=\"examples_license\">\tExamples submitted to clojuredocs will be licensed under the <a href=\"http://creativecommons.org/publicdomain/zero/1.0/\">Creative Commons CC 0</a>.</div><img alt=\"Ajax-loader\" class=\"ajax_loader\" height=\"20\" src=\"/images/ajax-loader.gif?1317195880\" width=\"20\" /><textarea class=\"textarea\" cols=\"40\" id=\"example_body\" name=\"example[body]\" rows=\"20\"></textarea><div style=\"text-align: right\">\t<a class=\"cancel\" href=\"\" style=\"float: left\">Cancel</a>\t<!-- <input class=\"preview_example\" type=\"button\" value=\"Preview\" /> -->\t<input id=\"example_submit\" name=\"commit\" type=\"submit\" value=\"Update Example\" />\t<div class=\"clear\"></div></div><input type=\"hidden\" name=\"update_example\" value=\"true\" /><input type=\"hidden\" name=\"example_id\" value=\"-1\" /><fieldset class=\"live_preview\">\t<legend>Live Preview</legend>\t<div class=\"preview\">\t</div></fieldset></form>',\n\t\teditCommentFormHTML: '<div class=\"edit_comment\"><form action=\"/clojure_core/clojure.core/atom\" method=\"post\"><div style=\"margin:0;padding:0;display:inline\"><input name=\"authenticity_token\" type=\"hidden\" value=\"W5FCJMHUHoicFfYpCVsE976sifq4dms3UCwEP5L0ziI=\" /></div>Comment <span class=\"instructions\">(markdown allowed, code in &lt;pre /&gt;)</span><br /><textarea class=\"textarea\" cols=\"40\" id=\"comment_body\" name=\"comment[body]\" rows=\"20\"></textarea><div style=\"text-align: right\">\t<a class=\"cancel\" href=\"\" style=\"float: left\">Cancel</a>\t<!-- <input class=\"preview_comment\" type=\"button\" value=\"Preview\" /> -->\t<input id=\"comment_submit\" name=\"commit\" type=\"submit\" value=\"Update Comment\" />\t<div class=\"clear\"></div></div><input type=\"hidden\" name=\"update_comment\" value=\"true\" /><input type=\"hidden\" name=\"comment_id\" value=\"-1\" /><fieldset class=\"live_preview\">\t<legend>Live Preview</legend>\t<div class=\"preview\"></div></fieldset></form>',\n\t})\n})\n")} "\n" {:tag :div, :attrs {:class "container_16"}, :content ("\n" {:tag :div, :attrs {:class "grid_3"}, :content ("\n\t\n" {:tag :div, :attrs {:class "lib_nav"}, :content ("\n\t" {:tag :h2, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core"}, :content ("Clojure Core")})} "\n\t\n\t" {:tag :ul, :attrs {:class "level_0"}, :content ("\n\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/quickref/Clojure%20Core"}, :content ("Quick Ref")} "\n\t\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\t" {:tag :li, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/quickref/shortdesc/Clojure%20Core"}, :content ("Short Descs")})} "\n\t\t\t\t" {:tag :li, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/quickref/varsonly/Clojure%20Core"}, :content ("Vars Only")})} "\n\t\t\t")} "\n\t\t")} "\n\t\t" {:tag :li, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core"}, :content ("Alphabetical")})} "\n\t")} "\n\t\n")} "\n\t\n" {:tag :div, :attrs {:class "namespaces"}, :content ("\n\t" {:tag :h3, :attrs nil, :content ("Namespaces")} "\n\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t\t\tclojure\n\t\t\t\t\t\t\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs {:class "current_ns"}, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core"}, :content ("core")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core.protocols"}, :content ("protocols")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.data"}, :content ("data")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.inspector"}, :content ("inspector")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t\t\tjava\n\t\t\t\t\t\t\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.browse"}, :content ("browse")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.browse-ui"}, :content ("browse-ui")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.io"}, :content ("io")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.javadoc"}, :content ("javadoc")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.shell"}, :content ("shell")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.main"}, :content ("main")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint"}, :content ("pprint")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.reflect"}, :content ("reflect")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.repl"}, :content ("repl")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.set"}, :content ("set")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.stacktrace"}, :content ("stacktrace")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.string"}, :content ("string")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.template"}, :content ("template")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.test"}, :content ("test")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.test.junit"}, :content ("junit")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.test.tap"}, :content ("tap")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.walk"}, :content ("walk")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.xml"}, :content ("xml")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.zip"}, :content ("zip")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n")} "\n\n\n\t \n")} "\n" {:tag :div, :attrs {:class "grid_11"}, :content ("\n\t\n\t" {:tag :a, :attrs {:name "top"}, :content nil} "\n\t" {:tag :div, :attrs {:class "function_links"}, :content ("\n\t\t" {:tag :a, :attrs {:class "scroll", :href "#doc"}, :content ("doc")} "\n\t\t" {:tag :a, :attrs {:class "scroll", :href "#source"}, :content ("source")} "\n\t\t" {:tag :a, :attrs {:class "scroll", :href "#examples"}, :content ("examples")} "\n\t\t" {:tag :a, :attrs {:class "scroll", :href "#comments"}, :content ("comments")} "\n\t")} "\n\t\n\t" {:tag :script, :attrs {:charset "utf-8", :type "text/javascript"}, :content ("\n\t\t$(document).ready(function() {\n\t\t\t$(\".versions_nav\").click(function() {\n\t\t\t\t$(\".versions_nav ul\").toggle()\n\t\t\t})\n\t\t})\n\t")} "\n\t\n\n\t" {:tag :div, :attrs {:class "versions_nav"}, :content ("\n\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t1.3.0 \n\t\t\t\n\t\t\t" {:tag :img, :attrs {:width "16", :height "16", :src "ClojureDocs%20-%20clojure.core_atom_files/arrow_down_16x16.png", :alt "Arrow_down_16x16"}, :content nil} "\n\t\t")} "\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t" {:type :comment, :data "  "} "\n\t\t\n\t\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\n\t\t\t\t\t" {:tag :a, :attrs {:class "", :href "http://clojuredocs.org/clojure_core/1.2.0/clojure.core/atom"}, :content ("1.2.0")} "\n\t\t\t\t\n\t\t\t")} "\n\t\t\n\t\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\n\t\t\t\t\t" {:tag :a, :attrs {:class "selected stable", :href "http://clojuredocs.org/clojure_core/1.3.0/clojure.core/atom"}, :content ("1.3.0 permalink")} "\n\t\t\t\t\n\t\t\t")} "\n\t\t\n\t\t")} "\n\t\t" {:type :comment, :data " <a href=\"/v/5370\">short link to this var</a> "} "\n\t")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "function_header"}, :content ("\n\t" {:tag :h1, :attrs nil, :content ("\n\t\tatom\n\t")} "\n\t" {:tag :h2, :attrs nil, :content ("\n\t\t" {:tag :span, :attrs {:class "ns"}, :content ("\n\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/1.3.0/clojure.core"}, :content ("clojure.core")} "\n\t\t")} "\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t")} "\n\t\n\t\n\t" {:tag :div, :attrs {:class "usage"}, :content ("\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("(atom x)")} "\n\t\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("(atom x & options)")} "\n\t\t\t\n\t\t")} "\n\t")} "\n\t\n\n\t\n\t\n\t" {:tag :div, :attrs {:class "doc"}, :content ("\n\t\t" {:tag :a, :attrs {:name "doc", :href "#doc", :class "internal_nav scroll"}, :content nil} "\n\t\t" {:tag :div, :attrs {:class "content"}, :content ("Creates and returns an Atom with an initial value of x and zero or" {:tag :br, :attrs nil, :content nil} "more options (in any order):" {:tag :br, :attrs nil, :content nil} {:tag :br, :attrs nil, :content nil} ":meta metadata-map" {:tag :br, :attrs nil, :content nil} {:tag :br, :attrs nil, :content nil} ":validator validate-fn" {:tag :br, :attrs nil, :content nil} {:tag :br, :attrs nil, :content nil} "If metadata-map is supplied, it will be come the metadata on the" {:tag :br, :attrs nil, :content nil} "atom. validate-fn must be nil or a side-effect-free fn of one" {:tag :br, :attrs nil, :content nil} "argument, which will be passed the intended new state on any state" {:tag :br, :attrs nil, :content nil} "change. If the new state is unacceptable, the validate-fn should" {:tag :br, :attrs nil, :content nil} "return false or throw an exception.")} "\n\t\t" {:tag :div, :attrs {:class "copyright_license"}, :content ("\n\t\t\t© Rich Hickey.  All rights reserved.\n\t\t\t\n\t\t\t" {:tag :a, :attrs {:href "http://www.eclipse.org/legal/epl-v10.html"}, :content ("Eclipse Public License 1.0")} "\n\t\t")} "\n\t")} "\n\t\n\t\n\t" {:tag :div, :attrs {:class "examples"}, :content ("\n\t\t" {:tag :h3, :attrs nil, :content ("\n\t\t\t" {:tag :a, :attrs {:name "examples", :href "#examples", :class "internal_nav scroll"}, :content ("\n\t\t\t\t" {:tag :span, :attrs {:id "examples_count"}, :content ("1")} " " {:tag :span, :attrs {:id "examples_desc"}, :content ("Example")} "\n\t\t\t")} "\n\t\t\t" {:tag :a, :attrs {:href "#top", :class "top scroll"}, :content ("top")} "\n\t\t")} "\n\t\t\n\t\t" {:tag :ul, :attrs {:id "var_examples"}, :content ("\n\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t" {:tag :div, :attrs {:id "example_330", :class "example"}, :content ("\n\t\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :a, :attrs {:href "#example_330", :name "example_330", :class "permalink"}, :content ("link")} "\n\t\t|\n\t\t" {:tag :a, :attrs {:class "view_changes", :href "http://clojuredocs.org/examples/view_changes/330"}, :content ("changes")} "\n\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :div, :attrs {:id "highlighter_603515", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar                        show"}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("01")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("def")} " " {:tag :code, :attrs {:class "plain"}, :content ("my-atom ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("atom")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("02")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "color1"}, :content ("#'user/my-atom")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("03")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("04")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("@")} {:tag :code, :attrs {:class "plain"}, :content ("my-atom")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("05")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "value"}, :content ("0")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("06")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("07")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("swap!")} " " {:tag :code, :attrs {:class "plain"}, :content ("my-atom ")} {:tag :code, :attrs {:class "functions"}, :content ("inc")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("08")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "value"}, :content ("1")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("09")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("10")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("@")} {:tag :code, :attrs {:class "plain"}, :content ("my-atom")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("11")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "value"}, :content ("1")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("12")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("13")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("swap!")} " " {:tag :code, :attrs {:class "plain"}, :content ("my-atom ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("fn")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("n")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("*")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("+")} " " {:tag :code, :attrs {:class "plain"}, :content ("n n")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("14")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("4")})})})})})})})} "\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content ("user=> (def my-atom (atom 0))\n#'user/my-atom\n\nuser=> @my-atom\n0\n\nuser=> (swap! my-atom inc)\n1\n\nuser=> @my-atom\n1\n\nuser=> (swap! my-atom (fn [n] (* (+ n n) 2)))\n4")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\n\t\t")} "\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\tLog in to add / edit an example.\n\t\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "see_alsos"}, :content ("\n\t\t" {:tag :h3, :attrs nil, :content ("See Also " {:tag :a, :attrs {:href "#top", :class "top scroll"}, :content ("top")})} "\n\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\t\t\t" {:tag :li, :attrs {:id "see_also_item_10", :class "see_also_item"}, :content ("\n\t\t\t\t\n" {:tag :div, :attrs nil, :content ("\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :span, :attrs {:class "vote_count "}, :content ("2")} "\n\n\t\t\t\n\t\t\n\t")} "\n\t\n\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core/reset%21"}, :content ({:tag :span, :attrs {:class "ns"}, :content ("clojure.core/")} {:tag :span, :attrs {:class "name"}, :content ("reset!")})} "\n\t\t\t\t\n\t" {:tag :p, :attrs {:class "shortdoc"}, :content ("Sets the value of atom to newval without regard for the\n  current val")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :li, :attrs {:id "see_also_item_11", :class "see_also_item"}, :content ("\n\t\t\t\t\n" {:tag :div, :attrs nil, :content ("\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :span, :attrs {:class "vote_count "}, :content ("2")} "\n\n\t\t\t\n\t\t\n\t")} "\n\t\n\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core/swap%21"}, :content ({:tag :span, :attrs {:class "ns"}, :content ("clojure.core/")} {:tag :span, :attrs {:class "name"}, :content ("swap!")})} "\n\t\t\t\t\n\t" {:tag :p, :attrs {:class "shortdoc"}, :content ("Atomically swaps the value of atom to be:\n  (apply f current-value-of")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :li, :attrs {:id "see_also_item_984", :class "see_also_item"}, :content ("\n\t\t\t\t\n" {:tag :div, :attrs nil, :content ("\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :span, :attrs {:class "vote_count "}, :content ("1")} "\n\n\t\t\t\n\t\t\n\t")} "\n\t\n\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core/compare-and-set%21"}, :content ({:tag :span, :attrs {:class "ns"}, :content ("clojure.core/")} {:tag :span, :attrs {:class "name"}, :content ("compare-and-set!")})} "\n\t\t\t\t\n\t" {:tag :p, :attrs {:class "shortdoc"}, :content ("Atomically sets the value of atom to newval if and only if the\n  curr")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :li, :attrs {:id "see_also_item_1110", :class "see_also_item"}, :content ("\n\t\t\t\t\n" {:tag :div, :attrs nil, :content ("\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :span, :attrs {:class "vote_count "}, :content ("0")} "\n\n\t\t\t\n\t\t\n\t")} "\n\t\n\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core/add-watch"}, :content ({:tag :span, :attrs {:class "ns"}, :content ("clojure.core/")} {:tag :span, :attrs {:class "name"}, :content ("add-watch")})} "\n\t\t\t\t\n\t" {:tag :p, :attrs {:class "shortdoc"}, :content ("Alpha - subject to change.\n  Adds a watch function to an agent/atom/v")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :li, :attrs {:id "see_also_item_1111", :class "see_also_item"}, :content ("\n\t\t\t\t\n" {:tag :div, :attrs nil, :content ("\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :span, :attrs {:class "vote_count "}, :content ("0")} "\n\n\t\t\t\n\t\t\n\t")} "\n\t\n\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core/remove-watch"}, :content ({:tag :span, :attrs {:class "ns"}, :content ("clojure.core/")} {:tag :span, :attrs {:class "name"}, :content ("remove-watch")})} "\n\t\t\t\t\n\t" {:tag :p, :attrs {:class "shortdoc"}, :content ("Alpha - subject to change.\n  Removes a watch (set by add-watch) from ")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :li, :attrs {:id "see_also_item_1251", :class "see_also_item"}, :content ("\n\t\t\t\t\n" {:tag :div, :attrs nil, :content ("\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :span, :attrs {:class "vote_count "}, :content ("0")} "\n\n\t\t\t\n\t\t\n\t")} "\n\t\n\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core/set-validator%21"}, :content ({:tag :span, :attrs {:class "ns"}, :content ("clojure.core/")} {:tag :span, :attrs {:class "name"}, :content ("set-validator!")})} "\n\t\t\t\t\n\t" {:tag :p, :attrs {:class "shortdoc"}, :content ("Sets the validator-fn for a var/ref/agent/atom. validator-fn must be ")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\t\n\t\t")} "\n\t\t\n\t\tLog in to add a see also.\n\t\t\n\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "source"}, :content ("\n\t\t" {:tag :h3, :attrs {:style "margin: 0px; padding: 0px;"}, :content ("\n\t\t\t" {:tag :img, :attrs {:width "12", :height "12", :src "ClojureDocs%20-%20clojure.core_atom_files/plus_12x12.png", :id "expand_source", :alt "Plus_12x12"}, :content nil} "\n\t\t\t" {:tag :img, :attrs {:width "12", :height "12", :src "ClojureDocs%20-%20clojure.core_atom_files/minus_12x12.png", :id "collapse_source", :alt "Minus_12x12"}, :content nil} "\n\t\t\t" {:tag :a, :attrs {:name "source", :href "#source", :class "internal_nav scroll"}, :content ("Source")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "file"}, :content ("\n\t\t\t\t\n\t\t\t\tclojure/core.clj:2081\n\t\t\t\t\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :a, :attrs {:href "#top", :class "top scroll"}, :content ("top")} "\n\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "source_content"}, :content ("\n\t\t\t" {:tag :div, :attrs {:id "highlighter_312941", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar"}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("01")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("defn")} " " {:tag :code, :attrs {:class "functions"}, :content ("atom")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("02")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "string"}, :content ("\"Creates and returns an Atom with an initial value of x and zero or")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("03")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "string"}, :content ("more options (in any order):")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("04")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("05")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "string"}, :content (":meta metadata-map")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("06")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("07")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "string"}, :content (":validator validate-fn")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("08")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("09")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "string"}, :content ("If metadata-map is supplied, it will be come the metadata on the")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("10")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "string"}, :content ("atom. validate-fn must be nil or a side-effect-free fn of one")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("11")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "string"}, :content ("argument, which will be passed the intended new state on any state")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("12")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "string"}, :content ("change. If the new state is unacceptable, the validate-fn should")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("13")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "string"}, :content ("return false or throw an exception.\"")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("14")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "keyword"}, :content ("{")} {:tag :code, :attrs {:class "constants"}, :content (":added")} " " {:tag :code, :attrs {:class "string"}, :content ("\"1.0\"")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("15")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("   ")} {:tag :code, :attrs {:class "constants"}, :content (":static")} " " {:tag :code, :attrs {:class "value"}, :content ("true")} {:tag :code, :attrs {:class "keyword"}, :content ("}")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("16")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("new")} " " {:tag :code, :attrs {:class "plain"}, :content ("clojure.lang.Atom x")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("17")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("&")} " " {:tag :code, :attrs {:class "plain"}, :content ("options")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("setup-reference ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("atom")} " " {:tag :code, :attrs {:class "plain"}, :content ("x")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "plain"}, :content ("options")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})})})} "\n\t\t\t" {:tag :div, :attrs {:class "copyright_license"}, :content ("\n\t\t\t\t© Rich Hickey.  All rights reserved.\n\n\t\t\t\t" {:tag :a, :attrs {:href "http://www.eclipse.org/legal/epl-v10.html"}, :content ("Eclipse Public License 1.0")} "\n\t\t\t")} "\n\n\t\t\t" {:tag :div, :attrs {:class "references"}, :content ("\n\t\t\t\tVars in " {:tag :span, :attrs {:class "ns"}, :content ("clojure.core/")} "atom:\n\t\t\t\t\n\t\t\t")} "\n\n\t\t\t" {:tag :div, :attrs {:class "used_in"}, :content ("\n\t\t\t\tUsed in 0 other vars\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t")} "\n\t\t")} "\n\t")} "\n\t\n\t\n\t" {:tag :div, :attrs {:class "comments"}, :content ("\n\t\t" {:tag :h3, :attrs nil, :content ({:tag :a, :attrs {:name "comments", :href "#comments", :class "internal_nav scroll"}, :content ("Comments")} " " {:tag :a, :attrs {:href "#top", :class "top scroll"}, :content ("top")})} "\n\t\t\n\t\t\t" {:tag :h4, :attrs nil, :content ("\n\t\t\t\tNo comments for " {:tag :em, :attrs nil, :content ("atom")} ".\n\t\t\t\t\n\t\t\t\t\tLog in to add a comment.\n\t\t\t\t\n\t\t\t")} "\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t" {:tag :div, :attrs {:id "preview_window", :class "hidden"}, :content ("\n\t\t")} "\n\t")} "\n")} "\n" {:tag :div, :attrs {:class "grid_3"}, :content ("\n\t\n\t \n")} "\n")} "\n\n\n\n\t\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "footer"}, :content ("\n\t\tClojureDocs uses some elements of HTML5 / CSS3, and is best viewed in an up-to-date " {:tag :a, :attrs {:href "http://getfirefox.com/"}, :content ("gecko")} " / " {:tag :a, :attrs {:href "http://www.google.com/chrome"}, :content ("webkit")} " -based browser.\n\t\t" {:tag :br, :attrs nil, :content nil} "\n\t\t" {:tag :br, :attrs nil, :content nil} "\n\t\t© 2010 Zachary Kim " {:tag :a, :attrs {:href "http://zacharykim.com/"}, :content ("http://zacharykim.com")} "\n\t\t" {:tag :br, :attrs nil, :content nil} "\n\t\t" {:tag :br, :attrs nil, :content nil} "\n\t")} "\n\n\n\n" {:tag :ul, :attrs {:class "ui-autocomplete ui-menu ui-widget ui-widget-content ui-corner-all", :role "listbox", :aria-activedescendant "ui-active-menuitem", :style "z-index: 1; top: 0px; left: 0px; display: none;"}, :content nil})})}) ({:type :comment, :data "?xml version=\"1.0\" encoding=\"ISO-8859-1\"?"} {:type :dtd, :data ["html" "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"]} {:tag :html, :attrs nil, :content ({:tag :head, :attrs nil, :content ("\n\t" {:tag :title, :attrs nil, :content ("ClojureDocs - clojure.core/for")} "\n\t" {:tag :meta, :attrs {:content "Documentation and examples for Clojure.", :name "description"}, :content nil} "\n\t" {:tag :meta, :attrs {:content "XjzqkjEPtcgtLjhnqAvtnVSeveEccs-O_unFGGlbk4g", :name "google-site-verification"}, :content nil} "\n\t" {:tag :meta, :attrs {:charset "utf-8", :content "text/html; charset=UTF-8", :http-equiv "Content-Type"}, :content nil} "\n\t" {:tag :link, :attrs {:href "http://clojuredocs.org/opensearch.xml", :title "ClojureDocs", :type "application/opensearchdescription+xml", :rel "search"}, :content nil} "\n\t" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_for_files/reset.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_for_files/text.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_for_files/grid.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_for_files/common.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_for_files/main.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_for_files/shCore.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.core_for_files/shThemeDefault.css"}, :content nil} "\n\t" {:tag :script, :attrs {:type "text/javascript", :async "", :src "ClojureDocs%20-%20clojure.core_for_files/ga.js"}, :content nil} {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_for_files/shCore.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_for_files/shBrushClojure.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_for_files/jquery-1.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_for_files/jquery-ui-1.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_for_files/jquery_003.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_for_files/jquery_002.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_for_files/jquery.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_for_files/showdown.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_for_files/cd.js"}, :content nil} "\n\n\t" {:tag :script, :attrs {:charset "utf-8", :type "text/javascript"}, :content ("\n\t// <![CDATA[\n\t\n\tCD.ROOT_URL = \"\"\n\t\n\tfunction setUpInternalNav() {\n\t\t$(\".scroll\").click(function(event){\n\t\t\t//prevent the default action for the click event\n\t\t\tevent.preventDefault();\n\n\t\t\t//get the full url - like mysitecom/index.htm#home\n\t\t\tvar full_url = this.href;\n\n\t\t\t//split the url by # and get the anchor target name - home in mysitecom/index.htm#home\n\t\t\tvar parts = full_url.split(\"#\");\n\t\t\tvar trgt = parts[1];\n\t\t\t\n\t\t\t//get the top offset of the target anchor\n\t\t\tvar target_offset = $(\"a[name=\"+trgt+\"]\").offset();\n\t\t\tvar target_top = target_offset.top - 10;\n\n\t\t\t//goto that anchor by setting the body scroll top to anchor top\n\t\t\t$('html, body').animate({scrollTop:target_top}, 500);\n\t\t});\n\t}\n\t\n\t$(document).ready(function() {\n\t\tsetUpInternalNav()\n\t\tvar mainText = \"Search\";\n\t\t$(\"#main_search\").makeFocusBlur(mainText, {setColorOnInit: true})\n\n\t\tvar acUrl = \"/ac_search\";\n\t\t\n\t\t//acUrl = \"/ac_search/clojure_core\";\n\t\t\n\t\t\n\t\t$('#main_search').keydown(function(e) {\n\t\t\tif(e.ctrlKey && e.which == 13) {\n\t\t\t\t$(\".search form\").append(\"<input type='hidden' name='feeling_lucky' value='true' />\")\n\t\t\t}\n\t\t})\n\t\t\t\n\t\t$(document).keydown(function(e) {\n\t\t\tif(e.ctrlKey && (e.which == 83)) {\n\t\t\t\t$('#main_search').focus()\n\t\t\t}\n\t\t\t\n\t\t\te.stopPropagation();\n\t\t})\n\t})\n\t// ]]>\t\n\t")} "\n\n\t" {:tag :script, :attrs {:type "text/javascript"}, :content ("\n\t/*** UserVoice ***/\n\tvar uservoiceOptions = {\n\t\t/* required */\n\t\tkey: 'clojuredocs',\n\t\thost: 'clojuredocs.uservoice.com', \n\t\tforum: '64757',\n\t\tshowTab: true,  \n\t\t/* optional */\n\t\talignment: 'right',\n\t\tbackground_color:'#ccc', \n\t\ttext_color: 'white',\n\t\thover_color: '#888',\n\t\tlang: 'en'\n\t};\n\n\tfunction _loadUserVoice() {\n\t\tvar s = document.createElement('script');\n\t\ts.setAttribute('type', 'text/javascript');\n\t\ts.setAttribute('src', (\"https:\" == document.location.protocol ? \"https://\" : \"http://\") + \"cdn.uservoice.com/javascripts/widgets/tab.js\");\n\t\tdocument.getElementsByTagName('head')[0].appendChild(s);\n\t}\n\t_loadSuper = window.onload;\n\twindow.onload = (typeof window.onload != 'function') ? _loadUserVoice : function() { _loadSuper(); _loadUserVoice();};\n\t")} "\n\t\n\t" {:tag :script, :attrs {:type "text/javascript"}, :content ("\n\t  /*** Google Analytics ***/\n\t  var _gaq = _gaq || [];\n\t  _gaq.push(['_setAccount', 'UA-17348828-1']);\n\t  _gaq.push(['_trackPageview']);\n\n\t  (function() {\n\t    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n\t    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n\t    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n\t  })();\n\n\t")} "\n\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.core_for_files/tab.js"}, :content nil} {:tag :style, :attrs {:type "text/css", :media "screen"}, :content ("    #uservoice-dialog {      z-index: 100003;      display: block;      text-align: left;      margin: -2em auto 0 auto;      position: fixed;     }        #uservoice-overlay {      position: fixed;      z-index:100002;      width: 100%;      height: 100%;      left: 0;      top: 0;      background-color: #000;      opacity: 0.7;    }        #uservoice-overlay p {      padding: 5px;      color: #ddd;      font: bold 14px arial, sans-serif;      margin: 0;      letter-spacing: -1px;    }        #uservoice-dialog #uservoice-dialog-close {      position: absolute;      height: 48px;      width: 48px;      top: -11px;      right: -12px;      color: #06c;      cursor: pointer;      background-position: 0 0;      background-repeat: no-repeat;      background-color: transparent;    }        html.dialog-open object,    html.dialog-open embed {      visibility: hidden;    }    a#uservoice-dialog-close { background-image: url(http://cdn.uservoice.com/images/icons/close.png); }")} {:tag :style, :attrs {:type "text/css", :media "screen"}, :content ("    body a#uservoice-feedback-tab,    body a#uservoice-feedback-tab:link {      background-position: 2px 50% !important;      position: fixed !important;      top: 45% !important;      display: block !important;      width: 25px !important;      height: 98px !important;      margin: -45px 0 0 0 !important;      padding: 0 !important;      z-index: 100001 !important;      background-position: 2px 50% !important;      background-repeat: no-repeat !important;      text-indent: -9000px;    }        body a#uservoice-feedback-tab:hover {      cursor: pointer;    }        a#uservoice-feedback-tab {       right: 0;       background-repeat: no-repeat;       background-color: #ccc;       background-image: url(http://cdn.uservoice.com/images/widgets/en/feedback_tab_white.png);       border: outset 1px #ccc;       border-right: none;     }        a#uservoice-feedback-tab:hover {       background-color: #888;       border: outset 1px #888;       border-right: none;     }")})} "\n\n" {:tag :body, :attrs nil, :content ({:tag :div, :attrs {:id "uservoice-feedback"}, :content ({:tag :a, :attrs {:href "http://clojuredocs.uservoice.com/forums/64757?lang=en", :onmouseover "UserVoice.Popin.preload();", :onclick "UserVoice.Popin.show(); return false;", :_ "", :id "uservoice-feedback-tab"}, :content ("Open Feedback Dialog")} {:tag :div, :attrs {:style "display:none;", :class "uservoice-component", :id "uservoice-dialog"}, :content ({:tag :a, :attrs {:title "Close Dialog", :id "uservoice-dialog-close", :onclick "UserVoice.Dialog.close(); return false;", :href "#close"}, :content ({:tag :span, :attrs {:style "display: none;"}, :content ("Close Dialog")})} {:tag :div, :attrs {:id "uservoice-dialog-content"}, :content ({:tag :iframe, :attrs {:width "350px", :scrolling "no", :height "530px", :frameborder "0", :style "height: 530px; width: 350px;", :allowtransparency "true", :src "ClojureDocs%20-%20clojure.core_for_files/popin.html", :id "uservoice_dialog_iframe"}, :content nil})})})} "\n\t" {:tag :script, :attrs {:charset "utf-8", :type "text/javascript"}, :content ("\n\t$(document).ready(function() {\n\t\t$(\"#main_search\").autocomplete({\n\t\t\tsource: function(req, add) {\n\t\t\t\t$.getJSON(\"/search_autocomplete\", req, function(data) {\n\t\t\t\t\tvar out = []\n\t\t\t\t\t$.each(data, function(i, v) {\n\t\t\t\t\t\tvar lbl = \"<div class=\\\"ac_search_result\\\">\"\n\t\t\t\t\t\tlbl += \"<span class='name'>\" + v.name + \"</span>\"\n\t\t\t\t\t\tlbl += \"<span class='ns'>\" + v.ns + \"</span>\"\n\t\t\t\t\t\tlbl += \"<br />\"\n\t\t\t\t\t\tlbl += \"<span class='shortdoc'>\" + v.shortdoc + \"</span>\"\n\t\t\t\t\t\tlbl += \"</div>\"\n\t\t\t\t\t\tout.push({label: lbl, value: v.name, href: v.href})\n\t\t\t\t\t})\n\t\t\t\t\t\n\t\t\t\t\tadd(out)\n\t\t\t\t})\n\t\t\t},\n\t\t\tfocus: function(event, ui) {\n\t\t\t\treturn false\n\t\t\t},\n\t\t\tselect: function(event, ui) {\n\t\t\t\twindow.location.href = ui.item.href\n\t\t\t\treturn false\n\t\t\t},\n\t\t\tdataType: \"json\"\n\t\t})\n\t})\n")} "\n\n" {:tag :div, :attrs {:class "header"}, :content ("\n\t" {:tag :div, :attrs {:class "container_16"}, :content ("\n\t" {:tag :div, :attrs {:class "header_content"}, :content ("\n\t\t" {:tag :div, :attrs {:class "user_area"}, :content ("\n\t\t\t\t" {:tag :div, :attrs {:class "grid_16"}, :content ("\n            " {:tag :span, :attrs {:class "main_nav"}, :content ("\n            " {:tag :a, :attrs {:href "http://api.clojuredocs.org/"}, :content ("api")} "\n             \n            " {:tag :a, :attrs {:href "http://clojuredocs.wordpress.com/"}, :content ("blog")} "\n             \n            " {:tag :a, :attrs {:href "http://github.com/zkim/clojuredocs"}, :content ("github")} "\n            ")} "\n             \n             \n\t\t\t\t  " {:tag :span, :attrs {:class "user_area_content"}, :content ("\n\t\t\t\t    \n\t\t\t\t      " {:tag :a, :attrs {:id "login", :href "http://clojuredocs.org/login"}, :content ("login / sign up")} "\n\t\t\t\t      \n\t\t\t\t  ")} "\n\t\t\t\t")} "\n\t\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "grid_1"}, :content ("\n\t\t  " {:tag :img, :attrs {:width "52", :height "33", :src "ClojureDocs%20-%20clojure.core_for_files/cd_logo.png", :class "cd_logo", :alt "Cd_logo"}, :content nil} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "grid_7"}, :content ("\n\t\t\t" {:tag :h1, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/"}, :content ("ClojureDocs")} {:tag :span, :attrs {:class "version"}, :content ("(beta)")})} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "grid_8"}, :content ("\n\t\t\t" {:tag :div, :attrs {:class "search"}, :content ("\n\t\t\t\t" {:tag :form, :attrs {:method "get", :action "/search"}, :content ("\n\t\t\t\t\t" {:tag :input, :attrs {:width "20px", :type "image", :height "20px", :src "ClojureDocs%20-%20clojure.core_for_files/magnifying_glass_alt_24x24.png", :class "submit_image"}, :content nil} "\n\t\t\t\t\t" {:tag :input, :attrs {:type "text", :name "q", :class "text_field ui-autocomplete-input", :id "main_search", :style "color: rgb(0, 0, 0);", :autocomplete "off", :role "textbox", :aria-autocomplete "list", :aria-haspopup "true"}, :content nil} "\n\t\t\t\t\t\n\t\t\t\t\t\t" {:tag :input, :attrs {:type "hidden", :value "clojure_core", :name "lib"}, :content nil} "\n\t\t\t\t\t\n\t\t\t\t")} "\n\t\t\t")} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t")} "\n\t")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n" {:tag :div, :attrs {:class "header_filler"}, :content nil} "\n" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\n\t\n\t\n\t\n\n\n" {:tag :script, :attrs {:charset "utf-8", :type "text/javascript"}, :content ("\n\n\n$(document).ready(function() {\n\tCD.VarPage.init({\n\t\tvarId: 5522,\n\t\tlibrary: \"Clojure Core\",\n\t\tversion: \"1.3.0\",\n\t\teditExampleFormHTML: '<div class=\"edit_example\"><form action=\"/clojure_core/clojure.core/for\" method=\"post\"><div style=\"margin:0;padding:0;display:inline\"><input name=\"authenticity_token\" type=\"hidden\" value=\"W5FCJMHUHoicFfYpCVsE976sifq4dms3UCwEP5L0ziI=\" /></div>Example Content <span class=\"instructions\">(code only, do not wrap in &lt;pre&gt; tags. See <a href=\"/examples_style_guide\">style guide</a> for more information.)</span><div class=\"examples_license\">\tExamples submitted to clojuredocs will be licensed under the <a href=\"http://creativecommons.org/publicdomain/zero/1.0/\">Creative Commons CC 0</a>.</div><img alt=\"Ajax-loader\" class=\"ajax_loader\" height=\"20\" src=\"/images/ajax-loader.gif?1317195880\" width=\"20\" /><textarea class=\"textarea\" cols=\"40\" id=\"example_body\" name=\"example[body]\" rows=\"20\"></textarea><div style=\"text-align: right\">\t<a class=\"cancel\" href=\"\" style=\"float: left\">Cancel</a>\t<!-- <input class=\"preview_example\" type=\"button\" value=\"Preview\" /> -->\t<input id=\"example_submit\" name=\"commit\" type=\"submit\" value=\"Update Example\" />\t<div class=\"clear\"></div></div><input type=\"hidden\" name=\"update_example\" value=\"true\" /><input type=\"hidden\" name=\"example_id\" value=\"-1\" /><fieldset class=\"live_preview\">\t<legend>Live Preview</legend>\t<div class=\"preview\">\t</div></fieldset></form>',\n\t\teditCommentFormHTML: '<div class=\"edit_comment\"><form action=\"/clojure_core/clojure.core/for\" method=\"post\"><div style=\"margin:0;padding:0;display:inline\"><input name=\"authenticity_token\" type=\"hidden\" value=\"W5FCJMHUHoicFfYpCVsE976sifq4dms3UCwEP5L0ziI=\" /></div>Comment <span class=\"instructions\">(markdown allowed, code in &lt;pre /&gt;)</span><br /><textarea class=\"textarea\" cols=\"40\" id=\"comment_body\" name=\"comment[body]\" rows=\"20\"></textarea><div style=\"text-align: right\">\t<a class=\"cancel\" href=\"\" style=\"float: left\">Cancel</a>\t<!-- <input class=\"preview_comment\" type=\"button\" value=\"Preview\" /> -->\t<input id=\"comment_submit\" name=\"commit\" type=\"submit\" value=\"Update Comment\" />\t<div class=\"clear\"></div></div><input type=\"hidden\" name=\"update_comment\" value=\"true\" /><input type=\"hidden\" name=\"comment_id\" value=\"-1\" /><fieldset class=\"live_preview\">\t<legend>Live Preview</legend>\t<div class=\"preview\"></div></fieldset></form>',\n\t})\n})\n")} "\n" {:tag :div, :attrs {:class "container_16"}, :content ("\n" {:tag :div, :attrs {:class "grid_3"}, :content ("\n\t\n" {:tag :div, :attrs {:class "lib_nav"}, :content ("\n\t" {:tag :h2, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core"}, :content ("Clojure Core")})} "\n\t\n\t" {:tag :ul, :attrs {:class "level_0"}, :content ("\n\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/quickref/Clojure%20Core"}, :content ("Quick Ref")} "\n\t\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\t" {:tag :li, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/quickref/shortdesc/Clojure%20Core"}, :content ("Short Descs")})} "\n\t\t\t\t" {:tag :li, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/quickref/varsonly/Clojure%20Core"}, :content ("Vars Only")})} "\n\t\t\t")} "\n\t\t")} "\n\t\t" {:tag :li, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core"}, :content ("Alphabetical")})} "\n\t")} "\n\t\n")} "\n\t\n" {:tag :div, :attrs {:class "namespaces"}, :content ("\n\t" {:tag :h3, :attrs nil, :content ("Namespaces")} "\n\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t\t\tclojure\n\t\t\t\t\t\t\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs {:class "current_ns"}, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core"}, :content ("core")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core.protocols"}, :content ("protocols")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.data"}, :content ("data")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.inspector"}, :content ("inspector")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t\t\tjava\n\t\t\t\t\t\t\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.browse"}, :content ("browse")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.browse-ui"}, :content ("browse-ui")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.io"}, :content ("io")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.javadoc"}, :content ("javadoc")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.shell"}, :content ("shell")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.main"}, :content ("main")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint"}, :content ("pprint")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.reflect"}, :content ("reflect")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.repl"}, :content ("repl")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.set"}, :content ("set")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.stacktrace"}, :content ("stacktrace")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.string"}, :content ("string")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.template"}, :content ("template")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.test"}, :content ("test")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.test.junit"}, :content ("junit")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.test.tap"}, :content ("tap")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.walk"}, :content ("walk")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.xml"}, :content ("xml")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.zip"}, :content ("zip")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n")} "\n\n\n\t \n")} "\n" {:tag :div, :attrs {:class "grid_11"}, :content ("\n\t\n\t" {:tag :a, :attrs {:name "top"}, :content nil} "\n\t" {:tag :div, :attrs {:class "function_links"}, :content ("\n\t\t" {:tag :a, :attrs {:class "scroll", :href "#doc"}, :content ("doc")} "\n\t\t" {:tag :a, :attrs {:class "scroll", :href "#source"}, :content ("source")} "\n\t\t" {:tag :a, :attrs {:class "scroll", :href "#examples"}, :content ("examples")} "\n\t\t" {:tag :a, :attrs {:class "scroll", :href "#comments"}, :content ("comments")} "\n\t")} "\n\t\n\t" {:tag :script, :attrs {:charset "utf-8", :type "text/javascript"}, :content ("\n\t\t$(document).ready(function() {\n\t\t\t$(\".versions_nav\").click(function() {\n\t\t\t\t$(\".versions_nav ul\").toggle()\n\t\t\t})\n\t\t})\n\t")} "\n\t\n\n\t" {:tag :div, :attrs {:class "versions_nav"}, :content ("\n\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t1.3.0 \n\t\t\t\n\t\t\t" {:tag :img, :attrs {:width "16", :height "16", :src "ClojureDocs%20-%20clojure.core_for_files/arrow_down_16x16.png", :alt "Arrow_down_16x16"}, :content nil} "\n\t\t")} "\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t" {:type :comment, :data "  "} "\n\t\t\n\t\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\n\t\t\t\t\t" {:tag :a, :attrs {:class "", :href "http://clojuredocs.org/clojure_core/1.2.0/clojure.core/for"}, :content ("1.2.0")} "\n\t\t\t\t\n\t\t\t")} "\n\t\t\n\t\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\n\t\t\t\t\t" {:tag :a, :attrs {:class "selected stable", :href "http://clojuredocs.org/clojure_core/1.3.0/clojure.core/for"}, :content ("1.3.0 permalink")} "\n\t\t\t\t\n\t\t\t")} "\n\t\t\n\t\t")} "\n\t\t" {:type :comment, :data " <a href=\"/v/5522\">short link to this var</a> "} "\n\t")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "function_header"}, :content ("\n\t" {:tag :h1, :attrs nil, :content ("\n\t\tfor\n\t")} "\n\t" {:tag :h2, :attrs nil, :content ("\n\t\t" {:tag :span, :attrs {:class "ns"}, :content ("\n\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/1.3.0/clojure.core"}, :content ("clojure.core")} "\n\t\t")} "\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t")} "\n\t\n\t\n\t" {:tag :div, :attrs {:class "usage"}, :content ("\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("(for seq-exprs body-expr)")} "\n\t\t\t\n\t\t")} "\n\t")} "\n\t\n\n\t\n\t\n\t" {:tag :div, :attrs {:class "doc"}, :content ("\n\t\t" {:tag :a, :attrs {:name "doc", :href "#doc", :class "internal_nav scroll"}, :content nil} "\n\t\t" {:tag :div, :attrs {:class "content"}, :content ("List comprehension. Takes a vector of one or more" {:tag :br, :attrs nil, :content nil} " binding-form/collection-expr pairs, each followed by zero or more" {:tag :br, :attrs nil, :content nil} " modifiers, and yields a lazy sequence of evaluations of expr." {:tag :br, :attrs nil, :content nil} " Collections are iterated in a nested fashion, rightmost fastest," {:tag :br, :attrs nil, :content nil} " and nested coll-exprs can refer to bindings created in prior" {:tag :br, :attrs nil, :content nil} " binding-forms.  Supported modifiers are: :let [binding-form expr ...]," {:tag :br, :attrs nil, :content nil} " :while test, :when test." {:tag :br, :attrs nil, :content nil} {:tag :br, :attrs nil, :content nil} "(take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))")} "\n\t\t" {:tag :div, :attrs {:class "copyright_license"}, :content ("\n\t\t\t© Rich Hickey.  All rights reserved.\n\t\t\t\n\t\t\t" {:tag :a, :attrs {:href "http://www.eclipse.org/legal/epl-v10.html"}, :content ("Eclipse Public License 1.0")} "\n\t\t")} "\n\t")} "\n\t\n\t\n\t" {:tag :div, :attrs {:class "examples"}, :content ("\n\t\t" {:tag :h3, :attrs nil, :content ("\n\t\t\t" {:tag :a, :attrs {:name "examples", :href "#examples", :class "internal_nav scroll"}, :content ("\n\t\t\t\t" {:tag :span, :attrs {:id "examples_count"}, :content ("11")} " " {:tag :span, :attrs {:id "examples_desc"}, :content ("Examples")} "\n\t\t\t")} "\n\t\t\t" {:tag :a, :attrs {:href "#top", :class "top scroll"}, :content ("top")} "\n\t\t")} "\n\t\t\n\t\t" {:tag :ul, :attrs {:id "var_examples"}, :content ("\n\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t" {:tag :div, :attrs {:id "example_148", :class "example"}, :content ("\n\t\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :a, :attrs {:href "#example_148", :name "example_148", :class "permalink"}, :content ("link")} "\n\t\t|\n\t\t" {:tag :a, :attrs {:class "view_changes", :href "http://clojuredocs.org/examples/view_changes/148"}, :content ("changes")} "\n\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :div, :attrs {:id "highlighter_323766", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar      "}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("1")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("0")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("4")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("2")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("             ")} {:tag :code, :attrs {:class "constants"}, :content (":let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("y ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("*")} " " {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("3")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("             ")} {:tag :code, :attrs {:class "constants"}, :content (":when")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("even?")} " " {:tag :code, :attrs {:class "plain"}, :content ("y")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("4")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("         ")} {:tag :code, :attrs {:class "plain"}, :content ("y")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("5")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "value"}, :content ("0")} " " {:tag :code, :attrs {:class "value"}, :content ("6")} " " {:tag :code, :attrs {:class "value"}, :content ("12")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})})})} "\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content ("user=> (for [x [0 1 2 3 4 5]\n             :let [y (* x 3)]\n             :when (even? y)]\n         y)\n(0 6 12)\n")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t" {:tag :div, :attrs {:id "example_189", :class "example"}, :content ("\n\t\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :a, :attrs {:href "#example_189", :name "example_189", :class "permalink"}, :content ("link")} "\n\t\t|\n\t\t" {:tag :a, :attrs {:class "view_changes", :href "http://clojuredocs.org/examples/view_changes/189"}, :content ("changes")} "\n\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :div, :attrs {:id "highlighter_439639", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar     "}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("1")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("def")} " " {:tag :code, :attrs {:class "plain"}, :content ("digits ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("seq")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("2")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x1 digits x2 digits")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("*")} " " {:tag :code, :attrs {:class "plain"}, :content ("x1 x2")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("3")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("4")} " " {:tag :code, :attrs {:class "value"}, :content ("6")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("6")} " " {:tag :code, :attrs {:class "value"}, :content ("9")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})})})} "\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content ("user=> (def digits (seq [1 2 3]))\nuser=> (for [x1 digits x2 digits] (* x1 x2))\n(1 2 3 2 4 6 3 6 9)")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t" {:tag :div, :attrs {:id "example_384", :class "example"}, :content ("\n\t\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :a, :attrs {:href "#example_384", :name "example_384", :class "permalink"}, :content ("link")} "\n\t\t|\n\t\t" {:tag :a, :attrs {:class "view_changes", :href "http://clojuredocs.org/examples/view_changes/384"}, :content ("changes")} "\n\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :div, :attrs {:id "highlighter_877582", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar            "}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("1")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "color1"}, :content ("'a")} " " {:tag :code, :attrs {:class "color1"}, :content ("'b")} " " {:tag :code, :attrs {:class "color1"}, :content ("'c")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("2")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("             ")} {:tag :code, :attrs {:class "plain"}, :content ("y ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("3")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("          ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("4")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("5")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("a ")} {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("a ")} {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("a ")} {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("b ")} {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("b ")} {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("b ")} {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("c ")} {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("c ")} {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("c ")} {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})})})} "\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content ("user=> (for [x ['a 'b 'c] \n             y [1 2 3]] \n          [x y])\n\n([a 1] [a 2] [a 3] [b 1] [b 2] [b 3] [c 1] [c 2] [c 3])")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t" {:tag :div, :attrs {:id "example_385", :class "example"}, :content ("\n\t\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :a, :attrs {:href "#example_385", :name "example_385", :class "permalink"}, :content ("link")} "\n\t\t|\n\t\t" {:tag :a, :attrs {:class "view_changes", :href "http://clojuredocs.org/examples/view_changes/385"}, :content ("changes")} "\n\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :div, :attrs {:id "highlighter_83712", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar         "}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("1")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("6")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("2")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("             ")} {:tag :code, :attrs {:class "constants"}, :content (":let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("y ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("*")} " " {:tag :code, :attrs {:class "plain"}, :content ("x x")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("3")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                   ")} {:tag :code, :attrs {:class "plain"}, :content ("z ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("*")} " " {:tag :code, :attrs {:class "plain"}, :content ("x x x")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("4")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("         ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x y z")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("5")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("6")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("4")} " " {:tag :code, :attrs {:class "value"}, :content ("8")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("9")} " " {:tag :code, :attrs {:class "value"}, :content ("27")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("4")} " " {:tag :code, :attrs {:class "value"}, :content ("16")} " " {:tag :code, :attrs {:class "value"}, :content ("64")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("25")} " " {:tag :code, :attrs {:class "value"}, :content ("125")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})})})} "\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content ("user=> (for [x (range 1 6) \n             :let [y (* x x) \n                   z (* x x x)]] \n         [x y z])\n\n([1 1 1] [2 4 8] [3 9 27] [4 16 64] [5 25 125])\n")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t" {:tag :div, :attrs {:id "example_557", :class "example"}, :content ("\n\t\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :a, :attrs {:href "#example_557", :name "example_557", :class "permalink"}, :content ("link")} "\n\t\t|\n\t\t" {:tag :a, :attrs {:class "view_changes", :href "http://clojuredocs.org/examples/view_changes/557"}, :content ("changes")} "\n\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :div, :attrs {:id "highlighter_901407", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar "}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("1")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("2")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("    ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("*")} " " {:tag :code, :attrs {:class "plain"}, :content ("x x")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("3")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("4")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "value"}, :content ("9")} " " {:tag :code, :attrs {:class "value"}, :content ("16")} " " {:tag :code, :attrs {:class "value"}, :content ("25")} " " {:tag :code, :attrs {:class "value"}, :content ("36")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})})})} "\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content ("(for [x (range 3 7)] \n    (* x x))\n\n(9 16 25 36)")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t" {:tag :div, :attrs {:id "example_618", :class "example"}, :content ("\n\t\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :a, :attrs {:href "#example_618", :name "example_618", :class "permalink"}, :content ("link")} "\n\t\t|\n\t\t" {:tag :a, :attrs {:class "view_changes", :href "http://clojuredocs.org/examples/view_changes/618"}, :content ("changes")} "\n\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :div, :attrs {:id "highlighter_677821", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar"}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("1")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("'(")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "constants"}, :content (":a")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "constants"}, :content (":b")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "constants"}, :content (":c")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "constants"}, :content (":when")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("=")} " " {:tag :code, :attrs {:class "plain"}, :content ("y ")} {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "plain"}, :content ("x")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("2")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "constants"}, :content (":c")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})})})} "\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content ("user=> (for [[x y] '([:a 1] [:b 2] [:c 0]) :when (= y 0)] x)\n(:c)\n")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t" {:tag :div, :attrs {:id "example_913", :class "example"}, :content ("\n\t\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :a, :attrs {:href "#example_913", :name "example_913", :class "permalink"}, :content ("link")} "\n\t\t|\n\t\t" {:tag :a, :attrs {:class "view_changes", :href "http://clojuredocs.org/examples/view_changes/913"}, :content ("changes")} "\n\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :div, :attrs {:id "highlighter_490736", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar "}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("1")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content ("; Demonstrating difference between :when and :while")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("2")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("3")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("time")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("dorun")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("1000")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "plain"}, :content ("y ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("10000")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "constants"}, :content (":when")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content (">")} " " {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("4")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "string"}, :content ("\"Elapsed time: 2898.908 msecs\"")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("5")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "value"}, :content ("nil")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("6")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("7")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("time")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("dorun")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("1000")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "plain"}, :content ("y ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("10000")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "constants"}, :content (":while")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content (">")} " " {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("8")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "string"}, :content ("\"Elapsed time: 293.677 msecs\"")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("9")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "value"}, :content ("nil")})})})})})})})} "\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content ("; Demonstrating difference between :when and :while\n\nuser=> (time (dorun (for [x (range 1000) y (range 10000) :when (> x y)] [x y])))\n\"Elapsed time: 2898.908 msecs\"\nnil\n\nuser=> (time (dorun (for [x (range 1000) y (range 10000) :while (> x y)] [x y])))\n\"Elapsed time: 293.677 msecs\"\nnil")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t" {:tag :div, :attrs {:id "example_933", :class "example"}, :content ("\n\t\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :a, :attrs {:href "#example_933", :name "example_933", :class "permalink"}, :content ("link")} "\n\t\t|\n\t\t" {:tag :a, :attrs {:class "view_changes", :href "http://clojuredocs.org/examples/view_changes/933"}, :content ("changes")} "\n\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :div, :attrs {:id "highlighter_161344", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar "}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("1")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content ("; Demonstrating difference between :when and :while")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("2")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "plain"}, :content ("y ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "constants"}, :content (":when")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("not=")} " " {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("3")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("0")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("0")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("4")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "plain"}, :content ("y ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "constants"}, :content (":while")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("not=")} " " {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("5")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})})})} "\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content ("; Demonstrating difference between :when and :while\nuser=> (for [x (range 3) y (range 3) :when (not= x y)] [x y])\n([0 1] [0 2] [1 0] [1 2] [2 0] [2 1])\nuser=> (for [x (range 3) y (range 3) :while (not= x y)] [x y])\n([1 0] [2 0] [2 1])")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t" {:tag :div, :attrs {:id "example_962", :class "example"}, :content ("\n\t\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :a, :attrs {:href "#example_962", :name "example_962", :class "permalink"}, :content ("link")} "\n\t\t|\n\t\t" {:tag :a, :attrs {:class "view_changes", :href "http://clojuredocs.org/examples/view_changes/962"}, :content ("changes")} "\n\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :div, :attrs {:id "highlighter_226561", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar    "}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("01")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; More examples illustrating the difference between :when and :while")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("02")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("03")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; Simple but inefficient method of checking whether a number is")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("04")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; prime.")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("05")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("defn")} " " {:tag :code, :attrs {:class "plain"}, :content ("prime? ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("n")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("06")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("         ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("not-any?")} " " {:tag :code, :attrs {:class "functions"}, :content ("zero?")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("map")} " " {:tag :code, :attrs {:class "keyword"}, :content ("#(")} {:tag :code, :attrs {:class "functions"}, :content ("rem")} " " {:tag :code, :attrs {:class "plain"}, :content ("n ")} {:tag :code, :attrs {:class "keyword"}, :content ("%")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "plain"}, :content ("n")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("07")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "color1"}, :content ("#'user/prime")} {:tag :code, :attrs {:class "plain"}, :content ("?")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("08")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("09")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("33")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("10")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("9")} " " {:tag :code, :attrs {:class "value"}, :content ("11")} " " {:tag :code, :attrs {:class "value"}, :content ("13")} " " {:tag :code, :attrs {:class "value"}, :content ("15")} " " {:tag :code, :attrs {:class "value"}, :content ("17")} " " {:tag :code, :attrs {:class "value"}, :content ("19")} " " {:tag :code, :attrs {:class "value"}, :content ("21")} " " {:tag :code, :attrs {:class "value"}, :content ("23")} " " {:tag :code, :attrs {:class "value"}, :content ("25")} " " {:tag :code, :attrs {:class "value"}, :content ("27")} " " {:tag :code, :attrs {:class "value"}, :content ("29")} " " {:tag :code, :attrs {:class "value"}, :content ("31")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("11")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("12")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; :when continues through the collection even if some have the")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("13")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; condition evaluate to false, like filter")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("14")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("33")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "constants"}, :content (":when")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("prime? x")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("15")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("         ")} {:tag :code, :attrs {:class "plain"}, :content ("x")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("16")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("11")} " " {:tag :code, :attrs {:class "value"}, :content ("13")} " " {:tag :code, :attrs {:class "value"}, :content ("17")} " " {:tag :code, :attrs {:class "value"}, :content ("19")} " " {:tag :code, :attrs {:class "value"}, :content ("23")} " " {:tag :code, :attrs {:class "value"}, :content ("29")} " " {:tag :code, :attrs {:class "value"}, :content ("31")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("17")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("18")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; :while stops at the first collection element that evaluates to")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("19")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; false, like take-while")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("20")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("33")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "constants"}, :content (":while")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("prime? x")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("21")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("         ")} {:tag :code, :attrs {:class "plain"}, :content ("x")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("22")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("23")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("24")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; The examples above can easily be rewritten with filter or")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("25")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; take-while.  When you have a for with multiple binding forms, so")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("26")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; that the iteration occurs in a nested fashion, it becomes possible")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("27")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; to write something briefly with 'for' that would be more verbose or")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("28")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; unwieldy with nested filter or take-while expressions.")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("29")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("30")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("17")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "constants"}, :content (":when")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("prime? x")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("31")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("             ")} {:tag :code, :attrs {:class "plain"}, :content ("y ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("17")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "constants"}, :content (":when")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("prime? y")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("32")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("         ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("33")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("11")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("13")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("34")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("11")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("13")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("35")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("11")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("13")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("36")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("11")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("11")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("11")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("11")} " " {:tag :code, :attrs {:class "value"}, :content ("11")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("11")} " " {:tag :code, :attrs {:class "value"}, :content ("13")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("37")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("13")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("13")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("13")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("13")} " " {:tag :code, :attrs {:class "value"}, :content ("11")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("13")} " " {:tag :code, :attrs {:class "value"}, :content ("13")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("38")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("39")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("17")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "constants"}, :content (":while")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("prime? x")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("40")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("             ")} {:tag :code, :attrs {:class "plain"}, :content ("y ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("17")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "constants"}, :content (":while")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("prime? y")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("41")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("         ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("42")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("43")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("44")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("45")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("46")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; This example only gives a finite result because of the :while")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("47")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; expressions.")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("48")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "constants"}, :content (":while")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("<")} " " {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "value"}, :content ("10")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("49")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("             ")} {:tag :code, :attrs {:class "plain"}, :content ("y ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "constants"}, :content (":while")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("<=")} " " {:tag :code, :attrs {:class "plain"}, :content ("y x")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("50")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("         ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("51")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("52")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("0")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("53")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("54")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("55")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("56")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("4")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("4")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("4")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("4")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("4")} " " {:tag :code, :attrs {:class "value"}, :content ("4")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("57")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("4")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("5")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("58")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("6")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("6")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("6")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("6")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("6")} " " {:tag :code, :attrs {:class "value"}, :content ("4")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("6")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("6")} " " {:tag :code, :attrs {:class "value"}, :content ("6")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("59")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("4")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("6")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("7")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("60")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("8")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("8")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("8")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("8")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("8")} " " {:tag :code, :attrs {:class "value"}, :content ("4")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("8")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("8")} " " {:tag :code, :attrs {:class "value"}, :content ("6")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("8")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("8")} " " {:tag :code, :attrs {:class "value"}, :content ("8")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("61")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("9")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("9")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("9")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("9")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("9")} " " {:tag :code, :attrs {:class "value"}, :content ("4")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("9")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("9")} " " {:tag :code, :attrs {:class "value"}, :content ("6")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("9")} " " {:tag :code, :attrs {:class "value"}, :content ("7")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("9")} " " {:tag :code, :attrs {:class "value"}, :content ("8")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("9")} " " {:tag :code, :attrs {:class "value"}, :content ("9")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})})})} "\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content (";; More examples illustrating the difference between :when and :while\n\n;; Simple but inefficient method of checking whether a number is\n;; prime.\nuser=> (defn prime? [n]\n         (not-any? zero? (map #(rem n %) (range 2 n))))\n#'user/prime?\n\nuser=> (range 3 33 2)\n(3 5 7 9 11 13 15 17 19 21 23 25 27 29 31)\n\n;; :when continues through the collection even if some have the\n;; condition evaluate to false, like filter\nuser=> (for [x (range 3 33 2) :when (prime? x)]\n         x)\n(3 5 7 11 13 17 19 23 29 31)\n\n;; :while stops at the first collection element that evaluates to\n;; false, like take-while\nuser=> (for [x (range 3 33 2) :while (prime? x)]\n         x)\n(3 5 7)\n\n;; The examples above can easily be rewritten with filter or\n;; take-while.  When you have a for with multiple binding forms, so\n;; that the iteration occurs in a nested fashion, it becomes possible\n;; to write something briefly with 'for' that would be more verbose or\n;; unwieldy with nested filter or take-while expressions.\n\nuser=> (for [x (range 3 17 2) :when (prime? x)\n             y (range 3 17 2) :when (prime? y)]\n         [x y])\n([ 3 3] [ 3 5] [ 3 7] [ 3 11] [ 3 13]\n [ 5 3] [ 5 5] [ 5 7] [ 5 11] [ 5 13]\n [ 7 3] [ 7 5] [ 7 7] [ 7 11] [ 7 13]\n [11 3] [11 5] [11 7] [11 11] [11 13]\n [13 3] [13 5] [13 7] [13 11] [13 13])\n\nuser=> (for [x (range 3 17 2) :while (prime? x)\n             y (range 3 17 2) :while (prime? y)]\n         [x y])\n([3 3] [3 5] [3 7]\n [5 3] [5 5] [5 7]\n [7 3] [7 5] [7 7])\n\n;; This example only gives a finite result because of the :while\n;; expressions.\nuser=> (for [x (range) :while (< x 10) \n             y (range) :while (<= y x)]\n         [x y])\n\n([0 0]\n [1 0] [1 1]\n [2 0] [2 1] [2 2]\n [3 0] [3 1] [3 2] [3 3]\n [4 0] [4 1] [4 2] [4 3] [4 4]\n [5 0] [5 1] [5 2] [5 3] [5 4] [5 5]\n [6 0] [6 1] [6 2] [6 3] [6 4] [6 5] [6 6]\n [7 0] [7 1] [7 2] [7 3] [7 4] [7 5] [7 6] [7 7]\n [8 0] [8 1] [8 2] [8 3] [8 4] [8 5] [8 6] [8 7] [8 8]\n [9 0] [9 1] [9 2] [9 3] [9 4] [9 5] [9 6] [9 7] [9 8] [9 9])\n")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t" {:tag :div, :attrs {:id "example_963", :class "example"}, :content ("\n\t\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :a, :attrs {:href "#example_963", :name "example_963", :class "permalink"}, :content ("link")} "\n\t\t|\n\t\t" {:tag :a, :attrs {:class "view_changes", :href "http://clojuredocs.org/examples/view_changes/963"}, :content ("changes")} "\n\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :div, :attrs {:id "highlighter_494609", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar"}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("01")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; Here are a couple of examples where the only difference is where")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("02")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; the :while is placed, but it makes a significant difference in the")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("03")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; behavior.")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("04")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("05")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; When x=2 y=1 is reached, :while (<= x y) evaluates false, so all")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("06")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; further items in the y collection are skipped.  When x=3 y=1 is")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("07")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; reached, the same thing happens.")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("08")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("09")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("10")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("             ")} {:tag :code, :attrs {:class "plain"}, :content ("y ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("11")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("             ")} {:tag :code, :attrs {:class "constants"}, :content (":while")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("<=")} " " {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("12")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("             ")} {:tag :code, :attrs {:class "plain"}, :content ("z ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("13")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("         ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x y z")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("14")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("15")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("16")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("17")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("18")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; This is different.  When x=2 y=1 z=1 is reached, :while (<= x y)")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("19")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; evaluates false, but since the :while is after the binding for z,")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("20")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; all further items in the z collection are skipped.  Then x=2 y=2")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("21")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "comments"}, :content (";; z=1 is tried, where the while expresssion evaluates true.")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("22")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("23")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("user=> ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("24")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("             ")} {:tag :code, :attrs {:class "plain"}, :content ("y ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("25")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("             ")} {:tag :code, :attrs {:class "plain"}, :content ("z ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("26")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("             ")} {:tag :code, :attrs {:class "constants"}, :content (":while")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("<=")} " " {:tag :code, :attrs {:class "plain"}, :content ("x y")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("27")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("         ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("x y z")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("28")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("29")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("30")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("1")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("31")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("32")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("33")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} " " {:tag :code, :attrs {:class "value"}, :content ("3")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})})})} "\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content (";; Here are a couple of examples where the only difference is where\n;; the :while is placed, but it makes a significant difference in the\n;; behavior.\n\n;; When x=2 y=1 is reached, :while (<= x y) evaluates false, so all\n;; further items in the y collection are skipped.  When x=3 y=1 is\n;; reached, the same thing happens.\n\nuser=> (for [x [1 2 3]\n             y [1 2 3]\n             :while (<= x y)\n             z [1 2 3]]\n         [x y z])\n([1 1 1] [1 1 2] [1 1 3]\n [1 2 1] [1 2 2] [1 2 3]\n [1 3 1] [1 3 2] [1 3 3])\n\n;; This is different.  When x=2 y=1 z=1 is reached, :while (<= x y)\n;; evaluates false, but since the :while is after the binding for z,\n;; all further items in the z collection are skipped.  Then x=2 y=2\n;; z=1 is tried, where the while expresssion evaluates true.\n\nuser=> (for [x [1 2 3]\n             y [1 2 3]\n             z [1 2 3]\n             :while (<= x y)]\n         [x y z])\n([1 1 1] [1 1 2] [1 1 3]\n [1 2 1] [1 2 2] [1 2 3]\n [1 3 1] [1 3 2] [1 3 3]\n [2 2 1] [2 2 2] [2 2 3]\n [2 3 1] [2 3 2] [2 3 3]\n [3 3 1] [3 3 2] [3 3 3])\n")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t" {:tag :div, :attrs {:id "example_1005", :class "example"}, :content ("\n\t\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :a, :attrs {:href "#example_1005", :name "example_1005", :class "permalink"}, :content ("link")} "\n\t\t|\n\t\t" {:tag :a, :attrs {:class "view_changes", :href "http://clojuredocs.org/examples/view_changes/1005"}, :content ("changes")} "\n\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :div, :attrs {:id "highlighter_441486", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar"}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("01")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("defn")} " " {:tag :code, :attrs {:class "plain"}, :content ("all-files-present?")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("02")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "string"}, :content ("\"Takes a list of real file names, and returns a map of files present 1")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("03")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "string"}, :content ("and not present 0.\"")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("04")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "functions"}, :content ("file-seq")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("05")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("fnam ")} {:tag :code, :attrs {:class "functions"}, :content ("file-seq")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("06")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content (" ")} {:tag :code, :attrs {:class "constants"}, :content (":let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("stat-map ")} {:tag :code, :attrs {:class "keyword"}, :content ("{")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("keyword")} " " {:tag :code, :attrs {:class "plain"}, :content ("fnam")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("look-for fnam ")} {:tag :code, :attrs {:class "string"}, :content ("\"f\"")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("}")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("07")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "plain"}, :content ("stat-map")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("08")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("09")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("into")} " " {:tag :code, :attrs {:class "keyword"}, :content ("{")} {:tag :code, :attrs {:class "keyword"}, :content ("}")} "  " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("all-files-present? ")} {:tag :code, :attrs {:class "keyword"}, :content ("'(")} {:tag :code, :attrs {:class "string"}, :content ("\"Makefile\"")} " " {:tag :code, :attrs {:class "string"}, :content ("\"build.sh\"")} " " {:tag :code, :attrs {:class "string"}, :content ("\"real-estate.csv\"")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("10")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("11")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("{")} {:tag :code, :attrs {:class "constants"}, :content (":Makefile")} " " {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "plain"}, :content (", ")} {:tag :code, :attrs {:class "constants"}, :content (":build")} {:tag :code, :attrs {:class "plain"}, :content (".sh ")} {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "plain"}, :content (", ")} {:tag :code, :attrs {:class "constants"}, :content (":real-estate")} {:tag :code, :attrs {:class "plain"}, :content (".csv ")} {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content ("}")})})})})})})})} "\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content ("(defn all-files-present?\n\"Takes a list of real file names, and returns a map of files present 1\nand not present 0.\"\n[file-seq]\n(for [fnam file-seq\n :let [stat-map {(keyword fnam) (look-for fnam \"f\")}]]\n  stat-map))\n\n(into {}  (all-files-present? '(\"Makefile\" \"build.sh\" \"real-estate.csv\")))\n\n{:Makefile 1, :build.sh 1, :real-estate.csv 0}")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\n\t\t")} "\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\tLog in to add / edit an example.\n\t\t\t\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "see_alsos"}, :content ("\n\t\t" {:tag :h3, :attrs nil, :content ("See Also " {:tag :a, :attrs {:href "#top", :class "top scroll"}, :content ("top")})} "\n\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\t\t\t" {:tag :li, :attrs {:id "see_also_item_599", :class "see_also_item"}, :content ("\n\t\t\t\t\n" {:tag :div, :attrs nil, :content ("\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :span, :attrs {:class "vote_count "}, :content ("1")} "\n\n\t\t\t\n\t\t\n\t")} "\n\t\n\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core/doseq"}, :content ({:tag :span, :attrs {:class "ns"}, :content ("clojure.core/")} {:tag :span, :attrs {:class "name"}, :content ("doseq")})} "\n\t\t\t\t\n\t" {:tag :p, :attrs {:class "shortdoc"}, :content ("Repeatedly executes body (presumably for side-effects) with\n  binding")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :li, :attrs {:id "see_also_item_907", :class "see_also_item"}, :content ("\n\t\t\t\t\n" {:tag :div, :attrs nil, :content ("\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :span, :attrs {:class "vote_count "}, :content ("0")} "\n\n\t\t\t\n\t\t\n\t")} "\n\t\n\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core/doall"}, :content ({:tag :span, :attrs {:class "ns"}, :content ("clojure.core/")} {:tag :span, :attrs {:class "name"}, :content ("doall")})} "\n\t\t\t\t\n\t" {:tag :p, :attrs {:class "shortdoc"}, :content ("When lazy sequences are produced via functions that have side\n  effec")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :li, :attrs {:id "see_also_item_1216", :class "see_also_item"}, :content ("\n\t\t\t\t\n" {:tag :div, :attrs nil, :content ("\n\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t" {:tag :span, :attrs {:class "vote_count "}, :content ("0")} "\n\n\t\t\t\n\t\t\n\t")} "\n\t\n\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core/recur"}, :content ({:tag :span, :attrs {:class "ns"}, :content ("clojure.core/")} {:tag :span, :attrs {:class "name"}, :content ("recur")})} "\n\t\t\t\t\n\t" {:tag :p, :attrs {:class "shortdoc"}, :content ("Please see http://clojure.org/special_forms#recur")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n\n\t\t\t")} "\n\t\t\t\n\t\t")} "\n\t\t\n\t\tLog in to add a see also.\n\t\t\n\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t")} "\n\t\n\t" {:tag :div, :attrs {:class "source"}, :content ("\n\t\t" {:tag :h3, :attrs {:style "margin: 0px; padding: 0px;"}, :content ("\n\t\t\t" {:tag :img, :attrs {:width "12", :height "12", :src "ClojureDocs%20-%20clojure.core_for_files/plus_12x12.png", :id "expand_source", :alt "Plus_12x12"}, :content nil} "\n\t\t\t" {:tag :img, :attrs {:width "12", :height "12", :src "ClojureDocs%20-%20clojure.core_for_files/minus_12x12.png", :id "collapse_source", :alt "Minus_12x12"}, :content nil} "\n\t\t\t" {:tag :a, :attrs {:name "source", :href "#source", :class "internal_nav scroll"}, :content ("Source")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "file"}, :content ("\n\t\t\t\t\n\t\t\t\tclojure/core.clj:4074\n\t\t\t\t\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :a, :attrs {:href "#top", :class "top scroll"}, :content ("top")} "\n\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "source_content"}, :content ("\n\t\t\t" {:tag :div, :attrs {:id "highlighter_173296", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar"}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("01")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("defmacro")} " " {:tag :code, :attrs {:class "functions"}, :content ("for")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("02")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "string"}, :content ("\"List comprehension. Takes a vector of one or more")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("03")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("   ")} {:tag :code, :attrs {:class "string"}, :content ("binding-form/collection-expr pairs, each followed by zero or more")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("04")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("   ")} {:tag :code, :attrs {:class "string"}, :content ("modifiers, and yields a lazy sequence of evaluations of expr.")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("05")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("   ")} {:tag :code, :attrs {:class "string"}, :content ("Collections are iterated in a nested fashion, rightmost fastest,")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("06")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("   ")} {:tag :code, :attrs {:class "string"}, :content ("and nested coll-exprs can refer to bindings created in prior")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("07")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("   ")} {:tag :code, :attrs {:class "string"}, :content ("binding-forms.  Supported modifiers are: :let [binding-form expr ...],")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("08")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("   ")} {:tag :code, :attrs {:class "string"}, :content (":while test, :when test.")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("09")})} {:tag :td, :attrs {:class "content"}, :content (" ")})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("10")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "string"}, :content ("(take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))\"")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("11")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "keyword"}, :content ("{")} {:tag :code, :attrs {:class "constants"}, :content (":added")} " " {:tag :code, :attrs {:class "string"}, :content ("\"1.0\"")} {:tag :code, :attrs {:class "keyword"}, :content ("}")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("12")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("seq-exprs body-expr")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("13")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("assert-args ")} {:tag :code, :attrs {:class "functions"}, :content ("for")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("14")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("     ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("vector?")} " " {:tag :code, :attrs {:class "plain"}, :content ("seq-exprs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "string"}, :content ("\"a vector for its binding\"")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("15")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("     ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("even?")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("count")} " " {:tag :code, :attrs {:class "plain"}, :content ("seq-exprs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "string"}, :content ("\"an even number of forms in binding vector\"")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("16")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("to-groups ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("fn")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("seq-exprs")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("17")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                    ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("reduce1 ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("fn")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("groups ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("k v")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("18")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                              ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("if")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("keyword?")} " " {:tag :code, :attrs {:class "plain"}, :content ("k")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("19")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("conj")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("pop")} " " {:tag :code, :attrs {:class "plain"}, :content ("groups")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("conj")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("peek")} " " {:tag :code, :attrs {:class "plain"}, :content ("groups")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("k v")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("20")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("conj")} " " {:tag :code, :attrs {:class "plain"}, :content ("groups ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("k v")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("21")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                            ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("partition")} " " {:tag :code, :attrs {:class "value"}, :content ("2")} " " {:tag :code, :attrs {:class "plain"}, :content ("seq-exprs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("22")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("        ")} {:tag :code, :attrs {:class "plain"}, :content ("err ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("fn")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "keyword"}, :content ("&")} " " {:tag :code, :attrs {:class "plain"}, :content ("msg")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("throw")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("IllegalArgumentException. ^String ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("apply")} " " {:tag :code, :attrs {:class "functions"}, :content ("str")} " " {:tag :code, :attrs {:class "plain"}, :content ("msg")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("23")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("        ")} {:tag :code, :attrs {:class "plain"}, :content ("emit-bind ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("fn")} " " {:tag :code, :attrs {:class "plain"}, :content ("emit-bind ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("bind expr ")} {:tag :code, :attrs {:class "keyword"}, :content ("&")} " " {:tag :code, :attrs {:class "plain"}, :content ("mod-pairs")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("24")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                  ")} {:tag :code, :attrs {:class "keyword"}, :content ("&")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("_ next-expr")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "constants"}, :content (":as")} " " {:tag :code, :attrs {:class "plain"}, :content ("next-groups")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("25")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                    ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("giter ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("gensym")} " " {:tag :code, :attrs {:class "string"}, :content ("\"iter__\"")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("26")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                          ")} {:tag :code, :attrs {:class "plain"}, :content ("gxs ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("gensym")} " " {:tag :code, :attrs {:class "string"}, :content ("\"s__\"")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("27")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                          ")} {:tag :code, :attrs {:class "plain"}, :content ("do-mod ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("fn")} " " {:tag :code, :attrs {:class "plain"}, :content ("do-mod ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("k v ")} {:tag :code, :attrs {:class "constants"}, :content (":as")} " " {:tag :code, :attrs {:class "plain"}, :content ("pair")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("&")} " " {:tag :code, :attrs {:class "plain"}, :content ("etc")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("28")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                   ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("cond")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("29")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                     ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("=")} " " {:tag :code, :attrs {:class "plain"}, :content ("k ")} {:tag :code, :attrs {:class "constants"}, :content (":let")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "keyword"}, :content ("`(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("let")} " " {:tag :code, :attrs {:class "color1"}, :content ("~v")} " " {:tag :code, :attrs {:class "keyword"}, :content ("~(")} {:tag :code, :attrs {:class "plain"}, :content ("do-mod etc")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("30")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                     ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("=")} " " {:tag :code, :attrs {:class "plain"}, :content ("k ")} {:tag :code, :attrs {:class "constants"}, :content (":while")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "keyword"}, :content ("`(")} {:tag :code, :attrs {:class "functions"}, :content ("when")} " " {:tag :code, :attrs {:class "color1"}, :content ("~v")} " " {:tag :code, :attrs {:class "keyword"}, :content ("~(")} {:tag :code, :attrs {:class "plain"}, :content ("do-mod etc")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("31")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                     ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("=")} " " {:tag :code, :attrs {:class "plain"}, :content ("k ")} {:tag :code, :attrs {:class "constants"}, :content (":when")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "keyword"}, :content ("`(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("if")} " " {:tag :code, :attrs {:class "color1"}, :content ("~v")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("32")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                                    ")} {:tag :code, :attrs {:class "keyword"}, :content ("~(")} {:tag :code, :attrs {:class "plain"}, :content ("do-mod etc")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("33")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                                    ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("recur")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("rest")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("34")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                     ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("keyword?")} " " {:tag :code, :attrs {:class "plain"}, :content ("k")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("err ")} {:tag :code, :attrs {:class "string"}, :content ("\"Invalid 'for' keyword \"")} " " {:tag :code, :attrs {:class "plain"}, :content ("k")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("35")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                     ")} {:tag :code, :attrs {:class "plain"}, :content ("next-groups")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("36")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                      ")} {:tag :code, :attrs {:class "keyword"}, :content ("`(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("iterys# ")} {:tag :code, :attrs {:class "keyword"}, :content ("~(")} {:tag :code, :attrs {:class "plain"}, :content ("emit-bind next-groups")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("37")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                             ")} {:tag :code, :attrs {:class "plain"}, :content ("fs# ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("seq")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("iterys# ")} {:tag :code, :attrs {:class "color1"}, :content ("~next-expr")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("38")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                         ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("if")} " " {:tag :code, :attrs {:class "plain"}, :content ("fs#")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("39")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                           ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("concat")} " " {:tag :code, :attrs {:class "plain"}, :content ("fs# ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "color1"}, :content ("~giter")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("rest")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("40")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                           ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("recur")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("rest")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("41")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                     ")} {:tag :code, :attrs {:class "constants"}, :content (":else")} " " {:tag :code, :attrs {:class "keyword"}, :content ("`(")} {:tag :code, :attrs {:class "functions"}, :content ("cons")} " " {:tag :code, :attrs {:class "color1"}, :content ("~body-expr")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("42")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                                  ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "color1"}, :content ("~giter")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("rest")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("43")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                      ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("if")} " " {:tag :code, :attrs {:class "plain"}, :content ("next-groups")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("44")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                        ")} {:tag :code, :attrs {:class "plain"}, :content ("#_")} {:tag :code, :attrs {:class "string"}, :content ("\"not the inner-most loop\"")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("45")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                        ")} {:tag :code, :attrs {:class "keyword"}, :content ("`(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("fn")} " " {:tag :code, :attrs {:class "color1"}, :content ("~giter")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("46")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                           ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("lazy-seq")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("47")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                             ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("loop")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("48")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                               ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("when-first")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "color1"}, :content ("~bind")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("49")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                 ")} {:tag :code, :attrs {:class "keyword"}, :content ("~(")} {:tag :code, :attrs {:class "plain"}, :content ("do-mod mod-pairs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("50")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                        ")} {:tag :code, :attrs {:class "plain"}, :content ("#_")} {:tag :code, :attrs {:class "string"}, :content ("\"inner-most loop\"")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("51")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                        ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("gi ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("gensym")} " " {:tag :code, :attrs {:class "string"}, :content ("\"i__\"")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("52")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                              ")} {:tag :code, :attrs {:class "plain"}, :content ("gb ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("gensym")} " " {:tag :code, :attrs {:class "string"}, :content ("\"b__\"")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("53")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                              ")} {:tag :code, :attrs {:class "plain"}, :content ("do-cmod ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("fn")} " " {:tag :code, :attrs {:class "plain"}, :content ("do-cmod ")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("k v ")} {:tag :code, :attrs {:class "constants"}, :content (":as")} " " {:tag :code, :attrs {:class "plain"}, :content ("pair")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "keyword"}, :content ("&")} " " {:tag :code, :attrs {:class "plain"}, :content ("etc")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("54")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                        ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("cond")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("55")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                          ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("=")} " " {:tag :code, :attrs {:class "plain"}, :content ("k ")} {:tag :code, :attrs {:class "constants"}, :content (":let")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "keyword"}, :content ("`(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("let")} " " {:tag :code, :attrs {:class "color1"}, :content ("~v")} " " {:tag :code, :attrs {:class "keyword"}, :content ("~(")} {:tag :code, :attrs {:class "plain"}, :content ("do-cmod etc")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("56")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                          ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("=")} " " {:tag :code, :attrs {:class "plain"}, :content ("k ")} {:tag :code, :attrs {:class "constants"}, :content (":while")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "keyword"}, :content ("`(")} {:tag :code, :attrs {:class "functions"}, :content ("when")} " " {:tag :code, :attrs {:class "color1"}, :content ("~v")} " " {:tag :code, :attrs {:class "keyword"}, :content ("~(")} {:tag :code, :attrs {:class "plain"}, :content ("do-cmod etc")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("57")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                          ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("=")} " " {:tag :code, :attrs {:class "plain"}, :content ("k ")} {:tag :code, :attrs {:class "constants"}, :content (":when")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "keyword"}, :content ("`(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("if")} " " {:tag :code, :attrs {:class "color1"}, :content ("~v")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("58")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                                         ")} {:tag :code, :attrs {:class "keyword"}, :content ("~(")} {:tag :code, :attrs {:class "plain"}, :content ("do-cmod etc")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("59")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                                         ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("recur")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("60")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                                           ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("unchecked-inc")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gi")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("61")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                          ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("keyword?")} " " {:tag :code, :attrs {:class "plain"}, :content ("k")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("62")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                            ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("err ")} {:tag :code, :attrs {:class "string"}, :content ("\"Invalid 'for' keyword \"")} " " {:tag :code, :attrs {:class "plain"}, :content ("k")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("63")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                          ")} {:tag :code, :attrs {:class "constants"}, :content (":else")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("64")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                            ")} {:tag :code, :attrs {:class "keyword"}, :content ("`(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("do")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("chunk-append")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gb")} " " {:tag :code, :attrs {:class "color1"}, :content ("~body-expr")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("65")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                                 ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("recur")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("unchecked-inc")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gi")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("66")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                          ")} {:tag :code, :attrs {:class "keyword"}, :content ("`(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("fn")} " " {:tag :code, :attrs {:class "color1"}, :content ("~giter")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("67")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                             ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("lazy-seq")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("68")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                               ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("loop")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("69")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                 ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("when-let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("seq")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("70")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                   ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("if")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("chunked-seq?")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("71")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                     ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("c# ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("chunk-first")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("72")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                           ")} {:tag :code, :attrs {:class "plain"}, :content ("size# ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("int")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("count")} " " {:tag :code, :attrs {:class "plain"}, :content ("c#")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("73")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                           ")} {:tag :code, :attrs {:class "color1"}, :content ("~gb")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("chunk-buffer")} " " {:tag :code, :attrs {:class "plain"}, :content ("size#")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("74")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                       ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("if")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("loop")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "color1"}, :content ("~gi")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("int")} " " {:tag :code, :attrs {:class "value"}, :content ("0")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("75")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                             ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("if")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("<")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gi")} " " {:tag :code, :attrs {:class "plain"}, :content ("size#")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("76")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                               ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "color1"}, :content ("~bind")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content (".nth c# ")} {:tag :code, :attrs {:class "color1"}, :content ("~gi")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("77")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                                 ")} {:tag :code, :attrs {:class "keyword"}, :content ("~(")} {:tag :code, :attrs {:class "plain"}, :content ("do-cmod mod-pairs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("78")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                               ")} {:tag :code, :attrs {:class "value"}, :content ("true")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("79")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                         ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("chunk-cons")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("80")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                           ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("chunk")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gb")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("81")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                           ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "color1"}, :content ("~giter")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("chunk-rest")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("82")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                         ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("chunk-cons")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("chunk")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gb")} {:tag :code, :attrs {:class "keyword"}, :content (")")} " " {:tag :code, :attrs {:class "value"}, :content ("nil")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("83")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                     ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "color1"}, :content ("~bind")} " " {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("first")} " " {:tag :code, :attrs {:class "color1"}, :content ("~gxs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("84")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("                                       ")} {:tag :code, :attrs {:class "keyword"}, :content ("~(")} {:tag :code, :attrs {:class "plain"}, :content ("do-mod mod-pairs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("85")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("    ")} {:tag :code, :attrs {:class "keyword"}, :content ("`(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("iter# ")} {:tag :code, :attrs {:class "keyword"}, :content ("~(")} {:tag :code, :attrs {:class "plain"}, :content ("emit-bind ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("to-groups seq-exprs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("86")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("        ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "plain"}, :content ("iter# ")} {:tag :code, :attrs {:class "keyword"}, :content ("~(")} {:tag :code, :attrs {:class "functions"}, :content ("second")} " " {:tag :code, :attrs {:class "plain"}, :content ("seq-exprs")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})})})} "\n\t\t\t" {:tag :div, :attrs {:class "copyright_license"}, :content ("\n\t\t\t\t© Rich Hickey.  All rights reserved.\n\n\t\t\t\t" {:tag :a, :attrs {:href "http://www.eclipse.org/legal/epl-v10.html"}, :content ("Eclipse Public License 1.0")} "\n\t\t\t")} "\n\n\t\t\t" {:tag :div, :attrs {:class "references"}, :content ("\n\t\t\t\tVars in " {:tag :span, :attrs {:class "ns"}, :content ("clojure.core/")} "for:\n\t\t\t\t\n\t\t\t")} "\n\n\t\t\t" {:tag :div, :attrs {:class "used_in"}, :content ("\n\t\t\t\tUsed in 0 other vars\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t")} "\n\t\t")} "\n\t")} "\n\t\n\t\n\t" {:tag :div, :attrs {:class "comments"}, :content ("\n\t\t" {:tag :h3, :attrs nil, :content ({:tag :a, :attrs {:name "comments", :href "#comments", :class "internal_nav scroll"}, :content ("Comments")} " " {:tag :a, :attrs {:href "#top", :class "top scroll"}, :content ("top")})} "\n\t\t\n\t\t\t" {:tag :h4, :attrs nil, :content ("2 comment(s) for " {:tag :em, :attrs nil, :content ("for")} ".")} "\n\t\t\n\t\t\n\t\t" {:tag :div, :attrs {:id "comment_155", :class "comment"}, :content ("\n\t" {:tag :div, :attrs {:class "comment_header"}, :content ("\n\t\t" {:tag :div, :attrs {:class "author"}, :content ("\n\t\t\t" {:tag :img, :attrs {:src "ClojureDocs%20-%20clojure.core_for_files/6c620615dfb537dbd5325380bd2eaa07.png"}, :content nil} "\n\t\t\t" {:tag :span, :attrs {:class "author_nickname"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/profile/csmotricz"}, :content ("csmotricz")} "\n\t\t\t")} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t\t" {:tag :a, :attrs {:href "#comment_155", :name "comment_155"}, :content ("link")} "\n\t\t\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :p, :attrs nil, :content ("Take careful note of the description's wording:")} "\n\n" {:tag :div, :attrs {:id "highlighter_721825", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar"}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("1")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("binding-form/collection-expr pairs, ")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("2")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "plain"}, :content ("each followed by zero ")} {:tag :code, :attrs {:class "functions"}, :content ("or")} " " {:tag :code, :attrs {:class "plain"}, :content ("more modifiers")})})})})})})})} "\n\n" {:tag :p, :attrs nil, :content ("A consequence is that the binding list may " {:tag :em, :attrs nil, :content ("not")} " begin with a modifier, i.e a " {:tag :code, :attrs nil, :content (":let")} ", " {:tag :code, :attrs nil, :content (":when")} " or " {:tag :code, :attrs nil, :content (":while")} "!")} "\n\n" {:tag :p, :attrs nil, :content ("The following example is " {:tag :strong, :attrs nil, :content ("illegal")} " syntax:")} "\n\n" {:tag :div, :attrs {:id "highlighter_85881", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar"}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("1")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "constants"}, :content (":let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("a ")} {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")} " " {:tag :code, :attrs {:class "plain"}, :content ("b ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("2")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "keyword"}, :content ("{")} {:tag :code, :attrs {:class "plain"}, :content ("a b")} {:tag :code, :attrs {:class "keyword"}, :content ("}")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})})})} "\n\n" {:tag :p, :attrs nil, :content ("While it might sometimes be convenient to start a " {:tag :code, :attrs nil, :content ("for")} " with a " {:tag :code, :attrs nil, :content (":let")} " to reduce code clutter, the \"correct\" procedure is to nest the " {:tag :code, :attrs nil, :content ("for")} " in a \"proper\" " {:tag :code, :attrs nil, :content ("let")} ", like this:")} "\n\n" {:tag :div, :attrs {:id "highlighter_806383", :class "syntaxhighlighter  "}, :content ({:tag :div, :attrs {:class "bar"}, :content ({:tag :div, :attrs {:class "toolbar"}, :content ({:tag :a, :attrs {:href "#viewSource", :title "view source", :style "width: 16px; height: 16px;", :class "item viewSource"}, :content ("view source")} {:tag :a, :attrs {:href "#printSource", :title "print", :style "width: 16px; height: 16px;", :class "item printSource"}, :content ("print")} {:tag :a, :attrs {:href "#about", :title "?", :style "width: 16px; height: 16px;", :class "item about"}, :content ("?")})})} {:tag :div, :attrs {:class "lines"}, :content ({:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("1")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "preprocessor"}, :content ("let")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("a ")} {:tag :code, :attrs {:class "value"}, :content ("1")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt2"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("2")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("  ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("for")} " " {:tag :code, :attrs {:class "keyword"}, :content ("[")} {:tag :code, :attrs {:class "plain"}, :content ("b ")} {:tag :code, :attrs {:class "keyword"}, :content ("(")} {:tag :code, :attrs {:class "functions"}, :content ("range")} " " {:tag :code, :attrs {:class "value"}, :content ("5")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content ("]")})})})})})} {:tag :div, :attrs {:class "line alt1"}, :content ({:tag :table, :attrs nil, :content ({:tag :tbody, :attrs nil, :content ({:tag :tr, :attrs nil, :content ({:tag :td, :attrs {:class "number"}, :content ({:tag :code, :attrs nil, :content ("3")})} {:tag :td, :attrs {:class "content"}, :content ({:tag :code, :attrs {:class "spaces"}, :content ("    ")} {:tag :code, :attrs {:class "keyword"}, :content ("{")} {:tag :code, :attrs {:class "plain"}, :content ("a b")} {:tag :code, :attrs {:class "keyword"}, :content ("}")} {:tag :code, :attrs {:class "keyword"}, :content (")")} {:tag :code, :attrs {:class "keyword"}, :content (")")})})})})})})})} "\n\n" {:tag :p, :attrs nil, :content ("Similarly, a " {:tag :code, :attrs nil, :content (":when")} " is better represented by nesting in an " {:tag :code, :attrs nil, :content ("if")} ".")} "\n\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content ("Take careful note of the \ndescription's wording:\n\n    binding-form/collection-expr pairs, \n    each followed by zero or more modifiers\n\nA consequence is that the binding list may *not* begin with a modifier, \ni.e a `:let`, `:when` or `:while`!\n\nThe following example is **illegal** syntax:\n\n    (for [:let [a 1] b (range 5)] \n      {a b})\n\nWhile it might sometimes be convenient to start a `for` with a `:let` to\n reduce code clutter, the \"correct\" procedure is to nest the `for` in a \n\"proper\" `let`, like this:\n\n    (let [a 1]\n      (for [b (range 5)] \n        {a b}))\n\nSimilarly, a `:when` is better represented by nesting in an `if`.\n\n")} "\n")} "\n\n\t\t\n\t\t" {:tag :div, :attrs {:id "comment_174", :class "comment"}, :content ("\n\t" {:tag :div, :attrs {:class "comment_header"}, :content ("\n\t\t" {:tag :div, :attrs {:class "author"}, :content ("\n\t\t\t" {:tag :img, :attrs {:src "ClojureDocs%20-%20clojure.core_for_files/75a5fdba1a164425d43d3b9c4b830287.jpeg"}, :content nil} "\n\t\t\t" {:tag :span, :attrs {:class "author_nickname"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/profile/Joan%20Charmant"}, :content ("Joan Charmant")} "\n\t\t\t")} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "controls"}, :content ("\n\t\t\t" {:tag :a, :attrs {:href "#comment_174", :name "comment_174"}, :content ("link")} "\n\t\t\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "content"}, :content ("\n\t" {:tag :p, :attrs nil, :content ("The fifth example should probably be shown in first position, it's the most straightforward and readable for a beginner :")} "\n\n" {:tag :p, :attrs nil, :content ("(for [x (range 3 7)] (* x x))")} "\n\n\t")} "\n\t" {:tag :div, :attrs {:class "hidden plain_content"}, :content ("The fifth example should probably be shown in first position, it's the most straightforward and readable for a beginner : \n\n(for [x (range 3 7)] (* x x))")} "\n")} "\n\n\t\t\n\t\t\n\t\t\t\n\t\t\t\tLog in to add a comment.\n\t\t\t\n\t\t\n\t\t\n\t\t" {:tag :div, :attrs {:id "preview_window", :class "hidden"}, :content ("\n\t\t")} "\n\t")} "\n")} "\n" {:tag :div, :attrs {:class "grid_3"}, :content ("\n\t\n\t \n")} "\n")} "\n\n\n\n\t\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "footer"}, :content ("\n\t\tClojureDocs uses some elements of HTML5 / CSS3, and is best viewed in an up-to-date " {:tag :a, :attrs {:href "http://getfirefox.com/"}, :content ("gecko")} " / " {:tag :a, :attrs {:href "http://www.google.com/chrome"}, :content ("webkit")} " -based browser.\n\t\t" {:tag :br, :attrs nil, :content nil} "\n\t\t" {:tag :br, :attrs nil, :content nil} "\n\t\t© 2010 Zachary Kim " {:tag :a, :attrs {:href "http://zacharykim.com/"}, :content ("http://zacharykim.com")} "\n\t\t" {:tag :br, :attrs nil, :content nil} "\n\t\t" {:tag :br, :attrs nil, :content nil} "\n\t")} "\n\n\n\n" {:tag :ul, :attrs {:class "ui-autocomplete ui-menu ui-widget ui-widget-content ui-corner-all", :role "listbox", :aria-activedescendant "ui-active-menuitem", :style "z-index: 1; top: 0px; left: 0px; display: none;"}, :content nil})})}) ({:type :comment, :data "?xml version=\"1.0\" encoding=\"ISO-8859-1\"?"} {:type :dtd, :data ["html" "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"]} {:tag :html, :attrs nil, :content ({:tag :head, :attrs nil, :content ("\n\t" {:tag :title, :attrs nil, :content ("ClojureDocs - clojure.pprint")} "\n\t" {:tag :meta, :attrs {:content "Documentation and examples for Clojure.", :name "description"}, :content nil} "\n\t" {:tag :meta, :attrs {:content "XjzqkjEPtcgtLjhnqAvtnVSeveEccs-O_unFGGlbk4g", :name "google-site-verification"}, :content nil} "\n\t" {:tag :meta, :attrs {:charset "utf-8", :content "text/html; charset=UTF-8", :http-equiv "Content-Type"}, :content nil} "\n\t" {:tag :link, :attrs {:href "http://clojuredocs.org/opensearch.xml", :title "ClojureDocs", :type "application/opensearchdescription+xml", :rel "search"}, :content nil} "\n\t" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.pprint_files/reset.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.pprint_files/text.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.pprint_files/grid.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.pprint_files/common.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.pprint_files/main.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.pprint_files/shCore.css"}, :content nil} "\n" {:tag :link, :attrs {:type "text/css", :rel "stylesheet", :media "screen", :href "ClojureDocs%20-%20clojure.pprint_files/shThemeDefault.css"}, :content nil} "\n\t" {:tag :script, :attrs {:type "text/javascript", :async "", :src "ClojureDocs%20-%20clojure.pprint_files/ga.js"}, :content nil} {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.pprint_files/shCore.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.pprint_files/shBrushClojure.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.pprint_files/jquery-1.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.pprint_files/jquery-ui-1.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.pprint_files/jquery_003.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.pprint_files/jquery_002.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.pprint_files/jquery.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.pprint_files/showdown.js"}, :content nil} "\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.pprint_files/cd.js"}, :content nil} "\n\n\t" {:tag :script, :attrs {:charset "utf-8", :type "text/javascript"}, :content ("\n\t// <![CDATA[\n\t\n\tCD.ROOT_URL = \"\"\n\t\n\tfunction setUpInternalNav() {\n\t\t$(\".scroll\").click(function(event){\n\t\t\t//prevent the default action for the click event\n\t\t\tevent.preventDefault();\n\n\t\t\t//get the full url - like mysitecom/index.htm#home\n\t\t\tvar full_url = this.href;\n\n\t\t\t//split the url by # and get the anchor target name - home in mysitecom/index.htm#home\n\t\t\tvar parts = full_url.split(\"#\");\n\t\t\tvar trgt = parts[1];\n\t\t\t\n\t\t\t//get the top offset of the target anchor\n\t\t\tvar target_offset = $(\"a[name=\"+trgt+\"]\").offset();\n\t\t\tvar target_top = target_offset.top - 10;\n\n\t\t\t//goto that anchor by setting the body scroll top to anchor top\n\t\t\t$('html, body').animate({scrollTop:target_top}, 500);\n\t\t});\n\t}\n\t\n\t$(document).ready(function() {\n\t\tsetUpInternalNav()\n\t\tvar mainText = \"Search\";\n\t\t$(\"#main_search\").makeFocusBlur(mainText, {setColorOnInit: true})\n\n\t\tvar acUrl = \"/ac_search\";\n\t\t\n\t\t//acUrl = \"/ac_search/clojure_core\";\n\t\t\n\t\t\n\t\t$('#main_search').keydown(function(e) {\n\t\t\tif(e.ctrlKey && e.which == 13) {\n\t\t\t\t$(\".search form\").append(\"<input type='hidden' name='feeling_lucky' value='true' />\")\n\t\t\t}\n\t\t})\n\t\t\t\n\t\t$(document).keydown(function(e) {\n\t\t\tif(e.ctrlKey && (e.which == 83)) {\n\t\t\t\t$('#main_search').focus()\n\t\t\t}\n\t\t\t\n\t\t\te.stopPropagation();\n\t\t})\n\t})\n\t// ]]>\t\n\t")} "\n\n\t" {:tag :script, :attrs {:type "text/javascript"}, :content ("\n\t/*** UserVoice ***/\n\tvar uservoiceOptions = {\n\t\t/* required */\n\t\tkey: 'clojuredocs',\n\t\thost: 'clojuredocs.uservoice.com', \n\t\tforum: '64757',\n\t\tshowTab: true,  \n\t\t/* optional */\n\t\talignment: 'right',\n\t\tbackground_color:'#ccc', \n\t\ttext_color: 'white',\n\t\thover_color: '#888',\n\t\tlang: 'en'\n\t};\n\n\tfunction _loadUserVoice() {\n\t\tvar s = document.createElement('script');\n\t\ts.setAttribute('type', 'text/javascript');\n\t\ts.setAttribute('src', (\"https:\" == document.location.protocol ? \"https://\" : \"http://\") + \"cdn.uservoice.com/javascripts/widgets/tab.js\");\n\t\tdocument.getElementsByTagName('head')[0].appendChild(s);\n\t}\n\t_loadSuper = window.onload;\n\twindow.onload = (typeof window.onload != 'function') ? _loadUserVoice : function() { _loadSuper(); _loadUserVoice();};\n\t")} "\n\t\n\t" {:tag :script, :attrs {:type "text/javascript"}, :content ("\n\t  /*** Google Analytics ***/\n\t  var _gaq = _gaq || [];\n\t  _gaq.push(['_setAccount', 'UA-17348828-1']);\n\t  _gaq.push(['_trackPageview']);\n\n\t  (function() {\n\t    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n\t    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n\t    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n\t  })();\n\n\t")} "\n\n" {:tag :script, :attrs {:type "text/javascript", :src "ClojureDocs%20-%20clojure.pprint_files/tab.js"}, :content nil} {:tag :style, :attrs {:type "text/css", :media "screen"}, :content ("    #uservoice-dialog {      z-index: 100003;      display: block;      text-align: left;      margin: -2em auto 0 auto;      position: fixed;     }        #uservoice-overlay {      position: fixed;      z-index:100002;      width: 100%;      height: 100%;      left: 0;      top: 0;      background-color: #000;      opacity: 0.7;    }        #uservoice-overlay p {      padding: 5px;      color: #ddd;      font: bold 14px arial, sans-serif;      margin: 0;      letter-spacing: -1px;    }        #uservoice-dialog #uservoice-dialog-close {      position: absolute;      height: 48px;      width: 48px;      top: -11px;      right: -12px;      color: #06c;      cursor: pointer;      background-position: 0 0;      background-repeat: no-repeat;      background-color: transparent;    }        html.dialog-open object,    html.dialog-open embed {      visibility: hidden;    }    a#uservoice-dialog-close { background-image: url(http://cdn.uservoice.com/images/icons/close.png); }")} {:tag :style, :attrs {:type "text/css", :media "screen"}, :content ("    body a#uservoice-feedback-tab,    body a#uservoice-feedback-tab:link {      background-position: 2px 50% !important;      position: fixed !important;      top: 45% !important;      display: block !important;      width: 25px !important;      height: 98px !important;      margin: -45px 0 0 0 !important;      padding: 0 !important;      z-index: 100001 !important;      background-position: 2px 50% !important;      background-repeat: no-repeat !important;      text-indent: -9000px;    }        body a#uservoice-feedback-tab:hover {      cursor: pointer;    }        a#uservoice-feedback-tab {       right: 0;       background-repeat: no-repeat;       background-color: #ccc;       background-image: url(http://cdn.uservoice.com/images/widgets/en/feedback_tab_white.png);       border: outset 1px #ccc;       border-right: none;     }        a#uservoice-feedback-tab:hover {       background-color: #888;       border: outset 1px #888;       border-right: none;     }")})} "\n\n" {:tag :body, :attrs nil, :content ({:tag :div, :attrs {:id "uservoice-feedback"}, :content ({:tag :a, :attrs {:href "http://clojuredocs.uservoice.com/forums/64757?lang=en", :onmouseover "UserVoice.Popin.preload();", :onclick "UserVoice.Popin.show(); return false;", :_ "", :id "uservoice-feedback-tab"}, :content ("Open Feedback Dialog")})} "\n\t" {:tag :script, :attrs {:charset "utf-8", :type "text/javascript"}, :content ("\n\t$(document).ready(function() {\n\t\t$(\"#main_search\").autocomplete({\n\t\t\tsource: function(req, add) {\n\t\t\t\t$.getJSON(\"/search_autocomplete\", req, function(data) {\n\t\t\t\t\tvar out = []\n\t\t\t\t\t$.each(data, function(i, v) {\n\t\t\t\t\t\tvar lbl = \"<div class=\\\"ac_search_result\\\">\"\n\t\t\t\t\t\tlbl += \"<span class='name'>\" + v.name + \"</span>\"\n\t\t\t\t\t\tlbl += \"<span class='ns'>\" + v.ns + \"</span>\"\n\t\t\t\t\t\tlbl += \"<br />\"\n\t\t\t\t\t\tlbl += \"<span class='shortdoc'>\" + v.shortdoc + \"</span>\"\n\t\t\t\t\t\tlbl += \"</div>\"\n\t\t\t\t\t\tout.push({label: lbl, value: v.name, href: v.href})\n\t\t\t\t\t})\n\t\t\t\t\t\n\t\t\t\t\tadd(out)\n\t\t\t\t})\n\t\t\t},\n\t\t\tfocus: function(event, ui) {\n\t\t\t\treturn false\n\t\t\t},\n\t\t\tselect: function(event, ui) {\n\t\t\t\twindow.location.href = ui.item.href\n\t\t\t\treturn false\n\t\t\t},\n\t\t\tdataType: \"json\"\n\t\t})\n\t})\n")} "\n\n" {:tag :div, :attrs {:class "header"}, :content ("\n\t" {:tag :div, :attrs {:class "container_16"}, :content ("\n\t" {:tag :div, :attrs {:class "header_content"}, :content ("\n\t\t" {:tag :div, :attrs {:class "user_area"}, :content ("\n\t\t\t\t" {:tag :div, :attrs {:class "grid_16"}, :content ("\n            " {:tag :span, :attrs {:class "main_nav"}, :content ("\n            " {:tag :a, :attrs {:href "http://api.clojuredocs.org/"}, :content ("api")} "\n             \n            " {:tag :a, :attrs {:href "http://clojuredocs.wordpress.com/"}, :content ("blog")} "\n             \n            " {:tag :a, :attrs {:href "http://github.com/zkim/clojuredocs"}, :content ("github")} "\n            ")} "\n             \n             \n\t\t\t\t  " {:tag :span, :attrs {:class "user_area_content"}, :content ("\n\t\t\t\t    \n\t\t\t\t      " {:tag :a, :attrs {:id "login", :href "http://clojuredocs.org/login"}, :content ("login / sign up")} "\n\t\t\t\t      \n\t\t\t\t  ")} "\n\t\t\t\t")} "\n\t\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "grid_1"}, :content ("\n\t\t  " {:tag :img, :attrs {:width "52", :height "33", :src "ClojureDocs%20-%20clojure.pprint_files/cd_logo.png", :class "cd_logo", :alt "Cd_logo"}, :content nil} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "grid_7"}, :content ("\n\t\t\t" {:tag :h1, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/"}, :content ("ClojureDocs")} {:tag :span, :attrs {:class "version"}, :content ("(beta)")})} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "grid_8"}, :content ("\n\t\t\t" {:tag :div, :attrs {:class "search"}, :content ("\n\t\t\t\t" {:tag :form, :attrs {:method "get", :action "/search"}, :content ("\n\t\t\t\t\t" {:tag :input, :attrs {:width "20px", :type "image", :height "20px", :src "ClojureDocs%20-%20clojure.pprint_files/magnifying_glass_alt_24x24.png", :class "submit_image"}, :content nil} "\n\t\t\t\t\t" {:tag :input, :attrs {:type "text", :name "q", :class "text_field ui-autocomplete-input", :id "main_search", :style "color: rgb(0, 0, 0);", :autocomplete "off", :role "textbox", :aria-autocomplete "list", :aria-haspopup "true"}, :content nil} "\n\t\t\t\t\t\n\t\t\t\t\t\t" {:tag :input, :attrs {:type "hidden", :value "clojure_core", :name "lib"}, :content nil} "\n\t\t\t\t\t\n\t\t\t\t")} "\n\t\t\t")} "\n\t\t")} "\n\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t")} "\n\t")} "\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n")} "\n" {:tag :div, :attrs {:class "header_filler"}, :content nil} "\n" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\n\t\n\t\n\t\n\n" {:tag :script, :attrs {:charset "utf-8", :type "text/javascript"}, :content ("\n\t$(document).ready(function() {\n\t\t$(\".versions_nav\").click(function() {\n\t\t\t$(\".versions_nav ul\").toggle()\n\t\t})\n\t})\n")} "\n" {:tag :div, :attrs {:class "container_16"}, :content ("\n" {:tag :div, :attrs {:class "grid_3"}, :content ("\n\t\n" {:tag :div, :attrs {:class "lib_nav"}, :content ("\n\t" {:tag :h2, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core"}, :content ("Clojure Core")})} "\n\t\n\t" {:tag :ul, :attrs {:class "level_0"}, :content ("\n\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/quickref/Clojure%20Core"}, :content ("Quick Ref")} "\n\t\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\t" {:tag :li, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/quickref/shortdesc/Clojure%20Core"}, :content ("Short Descs")})} "\n\t\t\t\t" {:tag :li, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/quickref/varsonly/Clojure%20Core"}, :content ("Vars Only")})} "\n\t\t\t")} "\n\t\t")} "\n\t\t" {:tag :li, :attrs nil, :content ({:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core"}, :content ("Alphabetical")})} "\n\t")} "\n\t\n")} "\n\t\n" {:tag :div, :attrs {:class "namespaces"}, :content ("\n\t" {:tag :h3, :attrs nil, :content ("Namespaces")} "\n\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t\t\tclojure\n\t\t\t\t\t\t\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core"}, :content ("core")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.core.protocols"}, :content ("protocols")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.data"}, :content ("data")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.inspector"}, :content ("inspector")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t\t\tjava\n\t\t\t\t\t\t\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.browse"}, :content ("browse")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.browse-ui"}, :content ("browse-ui")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.io"}, :content ("io")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.javadoc"}, :content ("javadoc")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.java.shell"}, :content ("shell")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.main"}, :content ("main")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs {:class "current_ns"}, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint"}, :content ("pprint")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.reflect"}, :content ("reflect")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.repl"}, :content ("repl")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.set"}, :content ("set")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.stacktrace"}, :content ("stacktrace")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.string"}, :content ("string")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.template"}, :content ("template")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.test"}, :content ("test")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.test.junit"}, :content ("junit")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.test.tap"}, :content ("tap")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.walk"}, :content ("walk")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.xml"}, :content ("xml")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.zip"}, :content ("zip")} "\n\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n\t\t\t\t\t\t")} "\n\t\t\t\t\t\n\t\t\t\t\n\t\t")} "\n\t\n")} "\n\n\n\t \n")} "\n" {:tag :div, :attrs {:class "grid_10"}, :content ("\n\t\n\t\n\t" {:tag :div, :attrs {:class "versions_nav"}, :content ("\n\t\t" {:tag :span, :attrs nil, :content ("\n\t\t\t1.3.0 \n\t\t\t\n\t\t\t" {:tag :img, :attrs {:width "16", :height "16", :src "ClojureDocs%20-%20clojure.pprint_files/arrow_down_16x16.png", :alt "Arrow_down_16x16"}, :content nil} "\n\t\t")} "\n\t\t" {:tag :ul, :attrs nil, :content ("\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\n\t\t\t\t\t" {:tag :a, :attrs {:class "", :href "http://clojuredocs.org/clojure_core/1.2.0/clojure.pprint"}, :content ("1.2.0")} "\n\t\t\t\t\n\t\t\t")} "\n\t\t\n\t\t\t\n\t\t\t" {:tag :li, :attrs nil, :content ("\n\t\t\t\t\n\t\t\t\t\t" {:tag :a, :attrs {:class "selected stable", :href "http://clojuredocs.org/clojure_core/1.3.0/clojure.pprint"}, :content ("1.3.0 permalink")} "\n\t\t\t\t\n\t\t\t")} "\n\t\t\n\t\t")} "\n\t")} "\n\t\n\t\n\t" {:tag :div, :attrs {:class "doc"}, :content ("\n\t\t" {:tag :h3, :attrs nil, :content ("DocString")} "\n\t\t" {:tag :pre, :attrs nil, :content ("A Pretty Printer for Clojure" {:tag :br, :attrs nil, :content nil} {:tag :br, :attrs nil, :content nil} "clojure.pprint implements a flexible system for printing structured data" {:tag :br, :attrs nil, :content nil} "in a pleasing, easy-to-understand format. Basic use of the pretty printer is " {:tag :br, :attrs nil, :content nil} "simple, just call pprint instead of println. More advanced users can use " {:tag :br, :attrs nil, :content nil} "the building blocks provided to create custom output formats. " {:tag :br, :attrs nil, :content nil} {:tag :br, :attrs nil, :content nil} "Out of the box, pprint supports a simple structured format for basic data " {:tag :br, :attrs nil, :content nil} "and a specialized format for Clojure source code. More advanced formats, " {:tag :br, :attrs nil, :content nil} "including formats that don't look like Clojure data at all like XML and " {:tag :br, :attrs nil, :content nil} "JSON, can be rendered by creating custom dispatch functions. " {:tag :br, :attrs nil, :content nil} {:tag :br, :attrs nil, :content nil} "In addition to the pprint function, this module contains cl-format, a text " {:tag :br, :attrs nil, :content nil} "formatting function which is fully compatible with the format function in " {:tag :br, :attrs nil, :content nil} "Common Lisp. Because pretty printing directives are directly integrated with" {:tag :br, :attrs nil, :content nil} "cl-format, it supports very concise custom dispatch. It also provides" {:tag :br, :attrs nil, :content nil} "a more powerful alternative to Clojure's standard format function." {:tag :br, :attrs nil, :content nil} {:tag :br, :attrs nil, :content nil} "See documentation for pprint and cl-format for more information or " {:tag :br, :attrs nil, :content nil} "complete documentation on the the clojure web site on github.")} "\n\t\t" {:tag :div, :attrs {:class "copyright_license"}, :content ("\n\t\t\t© Rich Hickey.  All rights reserved.\n\t\t\t\n\t\t\t" {:tag :a, :attrs {:href "http://www.eclipse.org/legal/epl-v10.html"}, :content ("Eclipse Public License 1.0")} "\n\t\t")} "\n\t")} "\n\t\n\t" {:tag :h3, :attrs nil, :content ("Vars in clojure.pprint")} "\n\n\t" {:tag :div, :attrs {:class "functions_list"}, :content ("\n\t\t\n\t\t\t" {:tag :h5, :attrs nil, :content ("*")} "\n\t\t\t" {:tag :div, :attrs {:class "functions"}, :content ("\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/*print-base*"}, :content ("*print-base*")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/*print-miser-width*"}, :content ("*print-miser-width*")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/*print-pprint-dispatch*"}, :content ("*print-pprint-dispatch*")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/*print-pretty*"}, :content ("*print-pretty*")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/*print-radix*"}, :content ("*print-radix*")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/*print-right-margin*"}, :content ("*print-right-margin*")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/*print-suppress-namespaces*"}, :content ("*print-suppress-namespaces*")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t")} "\n\t\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t\t\n\t\t\t" {:tag :h5, :attrs nil, :content ("c")} "\n\t\t\t" {:tag :div, :attrs {:class "functions"}, :content ("\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/cl-format"}, :content ("cl-format")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/code-dispatch"}, :content ("code-dispatch")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t")} "\n\t\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t\t\n\t\t\t" {:tag :h5, :attrs nil, :content ("f")} "\n\t\t\t" {:tag :div, :attrs {:class "functions"}, :content ("\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/formatter"}, :content ("formatter")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/formatter-out"}, :content ("formatter-out")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/fresh-line"}, :content ("fresh-line")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t")} "\n\t\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t\t\n\t\t\t" {:tag :h5, :attrs nil, :content ("g")} "\n\t\t\t" {:tag :div, :attrs {:class "functions"}, :content ("\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/get-pretty-writer"}, :content ("get-pretty-writer")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t")} "\n\t\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t\t\n\t\t\t" {:tag :h5, :attrs nil, :content ("p")} "\n\t\t\t" {:tag :div, :attrs {:class "functions"}, :content ("\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/pp"}, :content ("pp")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/pprint"}, :content ("pprint")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/pprint-indent"}, :content ("pprint-indent")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/pprint-logical-block"}, :content ("pprint-logical-block")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/pprint-newline"}, :content ("pprint-newline")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/pprint-tab"}, :content ("pprint-tab")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/print-length-loop"}, :content ("print-length-loop")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/print-table"}, :content ("print-table")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t")} "\n\t\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t\t\n\t\t\t" {:tag :h5, :attrs nil, :content ("s")} "\n\t\t\t" {:tag :div, :attrs {:class "functions"}, :content ("\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/set-pprint-dispatch"}, :content ("set-pprint-dispatch")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/simple-dispatch"}, :content ("simple-dispatch")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t")} "\n\t\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t\t\n\t\t\t" {:tag :h5, :attrs nil, :content ("w")} "\n\t\t\t" {:tag :div, :attrs {:class "functions"}, :content ("\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/with-pprint-dispatch"}, :content ("with-pprint-dispatch")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/write"}, :content ("write")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t" {:tag :span, :attrs {:class "function"}, :content ("\n\t\t\t\t" {:tag :a, :attrs {:href "http://clojuredocs.org/clojure_core/clojure.pprint/write-out"}, :content ("write-out")} "\n\t\t\t")} "\n\t\t\t\n\t\t\t")} "\n\t\t\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t\t\n\t")} "\n")} "\n" {:tag :div, :attrs {:class "grid_3"}, :content ("\n\t \n")} "\n")} "\n\n\t\n\t\n\t" {:tag :div, :attrs {:class "clear"}, :content nil} "\n\t" {:tag :div, :attrs {:class "footer"}, :content ("\n\t\tClojureDocs uses some elements of HTML5 / CSS3, and is best viewed in an up-to-date " {:tag :a, :attrs {:href "http://getfirefox.com/"}, :content ("gecko")} " / " {:tag :a, :attrs {:href "http://www.google.com/chrome"}, :content ("webkit")} " -based browser.\n\t\t" {:tag :br, :attrs nil, :content nil} "\n\t\t" {:tag :br, :attrs nil, :content nil} "\n\t\t© 2010 Zachary Kim " {:tag :a, :attrs {:href "http://zacharykim.com/"}, :content ("http://zacharykim.com")} "\n\t\t" {:tag :br, :attrs nil, :content nil} "\n\t\t" {:tag :br, :attrs nil, :content nil} "\n\t")} "\n\n\n\n" {:tag :ul, :attrs {:class "ui-autocomplete ui-menu ui-widget ui-widget-content ui-corner-all", :role "listbox", :aria-activedescendant "ui-active-menuitem", :style "z-index: 1; top: 0px; left: 0px; display: none;"}, :content nil})})}))