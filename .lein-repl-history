(load "context")
(redir "c1clone" (transform c1 [:p] (make-paragraphs c1 (paragraph-maid))))
(chapter c1 (paragraph-maid))
(redir "c1clone" (pprint (chapter c1 (paragraph-maid))))
(#(peek (butlast %)) [1 2 3 4 5])
(butlast [1 2 3 4 5])
(peek (vec (butlast [1 2 3 4 5])))
(fn [f coll] (lazy-seq (loop [result [], c coll] (recur (f (first c)) (rest c)))))
((fn [f coll] (lazy-seq (loop [result [], c coll] (recur (f (first c)) (rest c))))) inc [1 2 3 4 5])
((fn [f coll] (lazy-seq (loop [result [], c coll] (recur (f (first c)) (rest c))))) (partial + 2) [1 2 3 4 5])
((fn [f coll] (lazy-seq (loop [result [], c coll] (recur (f (first c)) (rest c))))) identity [1 2 3 4 5])
((fn [f coll] (loop [result [], c coll] (recur (f (first c)) (rest c)))) identity [1 2 3 4 5])
((fn [f coll] (loop [result [], c coll] (if (empty? coll) result (recur (f (first c)) (rest c)))) identity [1 2 3 4 5])
)
((fn [f coll] (loop [result [], c coll] (if (empty? coll) result (recur (f (first c)) (rest c))))) identity [1 2 3 4 5])
(for [x [1 2 3 4]] 1)
(reduce cons () [1 2 3 4])
(cons 1 ())
(cons () 1)
(conj () 1)
(reduce conj () [1 2 3 4])
(conj () 1 1)
(doc expt)
(redir "t.dat" (range 20))
(redir t.dat (range 20))
(redir "t" (range 20))
(pprint-str '(1 2 3 5))
(libretokindlehtml.test.core/pprint-str '(1 2 3 5))
(doc eval)
(eval '(first (1 2 3 4)))
(eval '(first '(1 2 3 4)))
(doc compile)
